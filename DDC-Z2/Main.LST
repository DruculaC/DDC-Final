C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c COMPACT BROWSE INCDIR(..\Library) DEBUG OBJECTEX
                    -TEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          
  30          // ------ Private variable definitions -----------------------------
  31          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  32          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  33          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  34          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  35          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  36          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  37          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  38          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  39          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  41          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  42          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  43          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  44          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  45          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  46          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  47          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  48          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  49          
  50          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  51          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  52          tWord timer0_count=0;      // counter for timer0, increment every ticket         
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 2   

  53          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  54          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  55          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  56          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  57          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  58          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  59          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  60          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  61          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  62          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  63          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  64          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  65          tByte key_rotated_on_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  66          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  67          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  68          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  69          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  70          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  71          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  72          bit vibration_flag = 0;
  73          tWord vibration_count = 0;
  74          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  75          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  76          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  77          bit sensor_EN = 0;
  78          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  79          bit sensor_3rdalarm_flag = 0;
  80          bit wheeled_flag = 0;
  81          tWord wheeled_count = 0;
  82          bit IDkey_speech_flash = 0;
  83          
  84          code tByte IDkey6 _at_ 0x003000;
  85          code tByte IDkey7 _at_ 0x003001;
  86          code tByte IDkey8 _at_ 0x003002;
  87          code tByte IDkey9 _at_ 0x003003;
  88          code tByte IDkey10 _at_ 0x003004;
  89          code tByte IDkey11 _at_ 0x003005;
  90          
  91          tWord IDkey_selflearn_HVcount = 0;
  92          tWord IDkey_selflearn_LVcount = 0;
  93          bit IDkey_selflearn_flag1 = 0;
  94          bit IDkey_selflearn_flag2 = 0;
  95          bit IDkey_selflearn_flag3 = 0;
  96          bit IDkey_selflearn_flag4 = 0;
  97          bit IDkey_selflearn_flag5 = 0;
  98          bit IDkey_selflearn_flag6 = 0;
  99          tByte IDkey_selflearn_flag4count = 0;
 100          bit IDkey_flash_EN = 0;
 101          
 102          tByte IDkey_certificated_times = 0;
 103          bit Silence_Flag = 0;
 104          bit flashing_flag = 0;
 105          
 106          /*------- Private variable declarations --------------------------*/
 107          
 108          void main()
 109             {  
 110   1      
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 3   

 111   1         noVoice();
 112   1         
 113   1         InitUART();
 114   1         InitT0(1);
 115   1         TI = 0;
 116   1         RI = 0;
 117   1         ES = 1;
 118   1         ET0 = 1;
 119   1         PS = 1;
 120   1         EA = 1;
 121   1      
 122   1         sensor_EN = 0;
 123   1         position_sensor_EN = 0;
 124   1         enable_sensor_delayEN = 1;
 125   1         
 126   1         raised_sensor_detect = 1;
 127   1         fell_sensor_detect = 1;
 128   1      
 129   1         P10=1;
 130   1         
 131   1      // horizontal_sensor = 1;
 132   1         
 133   1         // turn off transmitter, turn on receiver
 134   1         transmiter_EN = 1;
 135   1         receiver_EN = 0;
 136   1      
 137   1      
 138   1         nearby_away_interval = 6;        //³õÊ¼»¯Ê¹¸½»úºÍÖ÷»ú¿ª¹Ø»úµÄ¼ÆÊıÎª¿ÉÒÔÖ´ĞĞµÄ×´Ì¬
 139   1         
 140   1         // initialize the magnet, 
 141   1         MagentControl_1 = 1;
 142   1         MagentControl_2 = 1;
 143   1         
 144   1         transmiter_power = 1; 
 145   1         voice_EN=0;    //½«¹¦·Å¹Ø±Õ
 146   1         
 147   1         // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 148   1         motor_lock = 1;
 149   1         TR0 = 1;
 150   1         
 151   1         while(1)
 152   1            {
 153   2            SCH_Dispatch_Tasks();
 154   2            
 155   2            // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 156   2            if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 157   2               {
 158   3               stolen_alarm_flag = 1;
 159   3               if(key_rotate == 0)
 160   3                  {
 161   4                  SCH_Add_Task(stolen_alarm_speech1, 0, 0);
 162   4                  }
 163   3               if(++host_stolen_alarm1_count >= 4)
 164   3                  {
 165   4                  host_stolen_alarm1_count = 0;
 166   4                  host_stolen_alarm1_EN = 0;
 167   4                  stolen_alarm_flag = 0;
 168   4                  sensor_3rdalarm_flag = 0;
 169   4                  }
 170   3               }
 171   2            if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 172   2               {
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 4   

 173   3               stolen_alarm_flag = 1;
 174   3               if(key_rotate == 0)
 175   3                  {
 176   4                  SCH_Add_Task(stolen_alarm_speech2, 0, 0);
 177   4                  }
 178   3               if(++host_stolen_alarm2_count >= 4)
 179   3                  {
 180   4                  host_stolen_alarm2_count = 0;
 181   4                  host_stolen_alarm2_EN = 0;
 182   4                  stolen_alarm_flag = 0;
 183   4                  sensor_3rdalarm_flag = 0;
 184   4                  }
 185   3               }
 186   2            }
 187   1         }
 188          
 189          /*------------------------------------------------------------------
 190             timerT0()
 191             operation every ticket.
 192          --------------------------------------------------------------------*/
 193          
 194          void timer0() interrupt interrupt_timer_0_overflow
 195             {
 196   1         // manually reload timer0 configuration
 197   1         TH0 = timer0_8H;
 198   1         TL0 = timer0_8L;
 199   1         
 200   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 201   1         if(++timer0_count >= 2000)
 202   1            {
 203   2            // reset timer0 ticket counter every 2s
 204   2            timer0_count=0;
 205   2            
 206   2            // Check Battery's voltage
 207   2            if(motor_lock == 0)
 208   2               SCH_Add_Task(CheckADC, 0, 0);
 209   2            
 210   2            if(IDkey_flag == 1)
 211   2               {
 212   3               if(++IDkey_count >= 5)
 213   3                  {
 214   4                  IDkey_count = 0;
 215   4                  IDkey_flag = 0;
 216   4                  IDkey_certificated_times = 0;
 217   4                  if(key_rotated_on_flag == 0)
 218   4                     {
 219   5                     enable_sensor();              
 220   5                     }
 221   4                  }        
 222   3               }
 223   2                     
 224   2            if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 225   2               {
 226   3               if(++enable_sensor_delay_count >= 3)
 227   3                  {
 228   4                  enable_sensor_delay_count = 0;
 229   4                  enable_sensor_delayEN = 0;
 230   4                  enable_sensor();
 231   4                  }
 232   3               }
 233   2      
 234   2            if(IDkey_selflearn_flag4 == 1)
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 5   

 235   2               {
 236   3               if(++IDkey_selflearn_flag4count > 5)
 237   3                  {
 238   4                  IDkey_selflearn_HVcount = 0;
 239   4                  IDkey_selflearn_LVcount = 0;
 240   4                  IDkey_selflearn_flag1 = 0;
 241   4                  IDkey_selflearn_flag2 = 0;
 242   4                  IDkey_selflearn_flag3 = 0;
 243   4                  IDkey_selflearn_flag4 = 0;
 244   4                  IDkey_selflearn_flag4count = 0;           
 245   4                  }        
 246   3               }
 247   2            }  
 248   1      
 249   1         if(IDkey_speech_flash == 1)
 250   1            {
 251   2            IDkey_speech_flash = 0;
 252   2      //    SCH_Add_Task(ID_speech, 0, 0);
 253   2            ID_speech();
 254   2            SCH_Delete_Program(stolen_alarm_speech1);
 255   2            SCH_Delete_Program(stolen_alarm_speech2);
 256   2            }
 257   1      
 258   1         if(key_rotate == 1)
 259   1            {
 260   2            IDkey_selflearn_LVcount = 0;
 261   2                     
 262   2            if(++IDkey_selflearn_HVcount > 4000)
 263   2               {
 264   3               IDkey_selflearn_HVcount = 4002;
 265   3               IDkey_selflearn_flag1 = 0;
 266   3               IDkey_selflearn_flag2 = 0;
 267   3               IDkey_selflearn_flag3 = 0;
 268   3               IDkey_selflearn_flag4 = 0;
 269   3               IDkey_selflearn_flag5 = 0;
 270   3               }
 271   2            else
 272   2               {
 273   3               IDkey_selflearn_flag1 = 1;
 274   3               if(IDkey_selflearn_flag2 == 1)
 275   3                  IDkey_selflearn_flag3 = 1;
 276   3               if(IDkey_selflearn_flag4 == 1)
 277   3                  IDkey_selflearn_flag5 = 1;
 278   3               }
 279   2            }
 280   1         else
 281   1            {
 282   2            IDkey_selflearn_HVcount = 0;
 283   2            
 284   2            if(IDkey_selflearn_flag1 == 1)
 285   2               IDkey_selflearn_flag2 = 1;
 286   2               
 287   2            if(IDkey_selflearn_flag3 == 1)
 288   2               IDkey_selflearn_flag4 = 1;
 289   2            
 290   2            if(IDkey_selflearn_flag5 == 1)
 291   2               IDkey_selflearn_flag6 = 1;
 292   2            
 293   2            if(++IDkey_selflearn_LVcount > 4000)
 294   2               {
 295   3               IDkey_selflearn_LVcount = 4002;
 296   3               IDkey_selflearn_flag1 = 0;
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 6   

 297   3               IDkey_selflearn_flag2 = 0;
 298   3               IDkey_selflearn_flag3 = 0;
 299   3               IDkey_selflearn_flag4 = 0;
 300   3               IDkey_selflearn_flag5 = 0;
 301   3               }
 302   2            }
 303   1      
 304   1      
 305   1      
 306   1         if(IDkey_flash_EN == 1)
 307   1            {
 308   2            IDkey_flash_EN = 0;
 309   2            flashing_flag = 1;
 310   2            IDkey_selflearn_flag1 = 0;
 311   2            IDkey_selflearn_flag2 = 0;
 312   2            IDkey_selflearn_flag3 = 0;
 313   2            IDkey_selflearn_flag4 = 0;
 314   2            IDkey_selflearn_flag5 = 0;
 315   2            IDkey_selflearn_flag6 = 0;
 316   2            SCH_Add_Task(Self_learn_programming, 0, 0);
 317   2            SCH_Add_Task(Self_learn_speech, 0, 0);
 318   2            }
 319   1         
 320   1         // detect whether key is rotated on,  
 321   1         if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1))    
 322   1            {
 323   2            Delay_1ms();
 324   2            // anti-trigger, Delay(5) confirm the key rotation.
 325   2            if(key_rotate == 1)
 326   2               {
 327   3               disable_sensor();
 328   3      
 329   3               IDkey_count = 0;
 330   3               IDkey_flag = 0;
 331   3               IDkey_certificated_times = 0;
 332   3      
 333   3               SCH_Add_Task(ElecMotor_CW, 0, 0);
 334   3      
 335   3               SCH_Add_Task(slave_nearby_operation, 0, 0);
 336   3               }
 337   2            }     
 338   1                  
 339   1         // detect whether key is rotated off
 340   1         if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 341   1            {
 342   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 343   2               {
 344   3               Delay_1ms();
 345   3               if(key_rotate == 0)
 346   3                  {
 347   4                  // reset key rotation flag
 348   4                  key_rotated_on_flag=0;
 349   4                  SCH_Add_Task(slave_away_operation, 0, 0);
 350   4                                 
 351   4                  }           
 352   3               }
 353   2            }
 354   1            
 355   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 356   1            {
 357   2            vibration_flag = 1;
 358   2            vibration_count = 0;
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 7   

 359   2            }
 360   1          if(vibration_flag == 1)
 361   1            {
 362   2            if(++vibration_count >= 2000)
 363   2               {
 364   3               vibration_flag = 0;
 365   3               vibration_count = 0;
 366   3               }
 367   2            }
 368   1      
 369   1      
 370   1         if(wheeled_rotate == 1)
 371   1            {
 372   2            wheeled_flag = 1;
 373   2            wheeled_count = 0;
 374   2            }
 375   1         if(wheeled_flag == 1)
 376   1            {
 377   2            if(++wheeled_count >= 2000)
 378   2               {
 379   3               wheeled_flag = 0;
 380   3               wheeled_count = 0;
 381   3               }
 382   2            }
 383   1         
 384   1               
 385   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 386   1            {
 387   2            vibration_flag = 1;
 388   2            vibration_count = 0;       
 389   2            }     
 390   1            
 391   1         
 392   1         // judge whether battery has been stolen, 0.4V/4V
 393   1         if((ADC_check_result < 0x096) && (key_rotate == 0))
 394   1            {
 395   2            battery_stolen_EN = 1;
 396   2            }        
 397   1         else if(ADC_check_result > 0x100)
 398   1            {
 399   2            battery_stolen_EN = 0;
 400   2            battery_stolen_count = 0;
 401   2            }        
 402   1      
 403   1         // judge host is fell or raised every 1ms?
 404   1         if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 405   1            {
 406   2            // judge vibration sensor is enable?
 407   2            if(sensor_EN == 1)   
 408   2               {        
 409   3               // sensor trigger status, 0, 1 or 2?
 410   3               switch(sensor_trigger_count)
 411   3                  {
 412   4                  // case 0, it means host is in waiting status. waiting for first touch.
 413   4                  case 0:
 414   4                     {
 415   5                     
 416   5                     // judge host been touched and also not in vibration alarm
 417   5      //             if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))      
 418   5                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0)&&(flashing_flag == 0))  
             -   
 419   5                        {
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 8   

 420   6                        // judge LV is more than 2ms, if yes, it means a effective touch
 421   6                        if(++sensor_1ststage_count >= 1)       
 422   6                           {
 423   7                           sensor_1ststage_count=0;
 424   7                           
 425   7                           // sensor trigge status progress to case 1.
 426   7                           sensor_trigger_count = 1;
 427   7                           // alarm speech for first touch
 428   7      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 429   7                           host_touch_speech();
 430   7                           }
 431   6                        }
 432   5                     else
 433   5                        {
 434   6                        // if no LV, reset the count.
 435   6                        sensor_1ststage_count = 0;
 436   6                        }
 437   5                     }
 438   4                  break;
 439   4                  
 440   4                  // waiting for next touch, 
 441   4                  case 1:
 442   4                     {
 443   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 444   5                        {
 445   6                        // LV for 2s, means a effective touch
 446   6                        if(++sensor_2ndstage_count >= 1)
 447   6                           {
 448   7                           sensor_2ndstage_count = 0;
 449   7                           sensor_trigger_count = 2;
 450   7                           // alarm speech for 2nd touch
 451   7      //                   SCH_Add_Task(host_2ndtouch_speech, 0, 0);
 452   7                           host_2ndtouch_speech();
 453   7                           }
 454   6                        }
 455   5                     else
 456   5                        {
 457   6                        sensor_2ndstage_count = 0;
 458   6                        }
 459   5                     
 460   5                     // if there is no touch in 4s, reset sensor trigger status, etc.
 461   5                     if(++sensor_2ndstage_time >= 4000)
 462   5                        {
 463   6                        sensor_trigger_count = 0;
 464   6                        sensor_2ndstage_count = 0;
 465   6                        sensor_1ststage_count = 0;
 466   6                        sensor_2ndstage_time = 0;
 467   6                        }
 468   5                     }
 469   4                  break;
 470   4                  
 471   4                  // waiting for 3rd touch
 472   4                  case 2:
 473   4                     {
 474   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 475   5                        {
 476   6                        // 2s LV is a effective touch
 477   6                        if(++sensor_3rdstage_count >= 1)
 478   6                           {
 479   7                           sensor_3rdstage_count = 0;
 480   7                           // stolen alarm speech enable
 481   7                           host_stolen_alarm1_EN = 1;
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 9   

 482   7                           host_stolen_alarm2_EN = 1; 
 483   7                           sensor_3rdalarm_flag = 1;                    
 484   7                           }
 485   6                        }
 486   5                     else
 487   5                        {
 488   6                        sensor_3rdstage_count = 0;
 489   6                        }
 490   5                     
 491   5                     // if there is no touch in 4s, reset all.
 492   5                     if(++sensor_3rdstage_time >= 4000)
 493   5                        {
 494   6                        sensor_trigger_count = 0;
 495   6                        sensor_1ststage_count = 0;
 496   6                        sensor_2ndstage_count = 0;
 497   6                        sensor_2ndstage_time = 0;
 498   6                        sensor_3rdstage_time = 0;
 499   6                        sensor_3rdstage_interval = 800;
 500   6                        sensor_3rdstage_count = 0;
 501   6                        sensor_3rdstage_effcount = 0;             
 502   6                        }
 503   5                     }
 504   4                  break;
 505   4                  }
 506   3               
 507   3               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 508   3               if((wire_broken == 0) && (wire_broken_count < 51))  
 509   3                  {
 510   4                  if(++wire_broken_count > 50)
 511   4                     {
 512   5                     host_stolen_alarm1_EN = 1;
 513   5                     host_stolen_alarm2_EN = 1; 
 514   5                     wire_broken_count = 51;
 515   5                     }  
 516   4                  }
 517   3               else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 518   3                  {
 519   4                  wire_broken_count = 0;
 520   4                  host_stolen_alarm1_EN = 0;
 521   4                  host_stolen_alarm2_EN = 0;
 522   4                  }
 523   3               
 524   3               }
 525   2            }
 526   1         
 527   1         // judge whether position sensor is enable
 528   1         if(position_sensor_EN==1)     
 529   1            {
 530   2            // judge whether there is a LV
 531   2            if(raised_sensor_detect == 0) 
 532   2               {
 533   3               // LV > 0.5s means a effective input
 534   3               if(++raise_wire_time==10)
 535   3                  {
 536   4                  // flag raised, and reset fell
 537   4                  raised_flag=1;
 538   4                  fell_flag=0;
 539   4                  // judge whether there once been a raised or fell.
 540   4                  if(raised_fell_once_flag == 0)
 541   4                     {
 542   5                     // if no, flag raised and fell flag
 543   5                     raised_fell_flag = 1;               
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 10  

 544   5                     }
 545   4                  }     
 546   3               }
 547   2            else
 548   2               {
 549   3               raised_flag=0;
 550   3               raised_alarm_count=0;
 551   3               raise_wire_time=0;
 552   3               raised_fell_flag = 0;
 553   3               }
 554   2            // judge whether there is a LV
 555   2            if(fell_sensor_detect==0)
 556   2               {
 557   3               // LV > 0.5s means a effective input
 558   3               if(++fell_wire_time==10)   
 559   3                  {
 560   4                  // flag fell, and reset raised
 561   4                  fell_flag=1;         
 562   4                  raised_flag=0;
 563   4                  // judge whether there once been a raised or fell
 564   4                  if(raised_fell_once_flag == 0)
 565   4                     {
 566   5                     raised_fell_flag = 1;               
 567   5                     }
 568   4                  }     
 569   3               }
 570   2            else
 571   2               {
 572   3               fell_flag=0;
 573   3               fell_alarm_count=0;
 574   3               fell_wire_time=0;
 575   3               raised_fell_flag = 0;
 576   3               }
 577   2            }
 578   1         
 579   1         // judge whether raised or fell, if yes, reset all after 10s.
 580   1         if(raised_fell_flag == 1)
 581   1            {
 582   2            if(++raised_fell_number >= 4000)
 583   2               {
 584   3               raised_fell_flag = 0;
 585   3               raised_fell_number = 0;
 586   3               raised_fell_once_flag = 1;
 587   3               
 588   3               sensor_trigger_count = 0;
 589   3               sensor_1ststage_count = 0;
 590   3               sensor_2ndstage_count = 0;
 591   3               sensor_2ndstage_time = 0;
 592   3               sensor_3rdstage_time = 0;
 593   3               sensor_3rdstage_interval = 800;
 594   3               sensor_3rdstage_count = 0;
 595   3               sensor_3rdstage_effcount = 0;             
 596   3               }
 597   2            }
 598   1         
 599   1         // detect the horizontal sensor
 600   1         if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 601   1            {
 602   2            Delay(3);
 603   2            if((horizontal_sensor == 0)||(sensor_detect == 0))
 604   2               {
 605   3               horizontal_vibration = 1;
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 11  

 606   3               horizontal_vibration_count = 0;
 607   3               }
 608   2            }
 609   1         if(++horizontal_vibration_count >= 5000)
 610   1            {
 611   2            horizontal_vibration_count = 5001;
 612   2            horizontal_vibration = 0;
 613   2            }
 614   1         }
 615          
 616          /*-----------------------------------------------
 617             UART interrupt
 618          -----------------------------------------------*/
 619          void uart_isr() interrupt 4 
 620             {
 621   1         if(RI)
 622   1            {
 623   2            RI=0;
 624   2            received_data_buffer[data_count] = SBUF;
 625   2      
 626   2            // assign one byte to buffer[i] 
 627   2            
 628   2            if(IDkey_selflearn_flag6 == 0)
 629   2               {
 630   3               // judge whether buffer[0] is CmdHead
 631   3               if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 632   3                  {
 633   4                  data_count = 1;
 634   4                  }
 635   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 636   3                  {
 637   4                  data_count = 2;
 638   4                  }
 639   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 640   3                  {
 641   4                  data_count = 3;
 642   4                  }
 643   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 644   3                  {
 645   4                  data_count = 4;
 646   4                  }
 647   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 648   3                  {
 649   4                  data_count = 5;
 650   4                  }
 651   3               else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 652   3                  {
 653   4                  data_count = 0;   
 654   4                  IDkey_flag = 1;
 655   4                  IDkey_count = 0;
 656   4                  disable_sensor();
 657   4                  IDkey_speech_flash = 1;
 658   4                  
 659   4                  if(IDkey_certificated_times++ >= 1)
 660   4                     {
 661   5                     Silence_Flag = 1;
 662   5                     }
 663   4                  }
 664   3               else 
 665   3                  {
 666   4                  data_count = 0;
 667   4                  }        
C51 COMPILER V9.51   MAIN                                                                  12/21/2014 14:52:16 PAGE 12  

 668   3               }
 669   2            else
 670   2               {
 671   3               
 672   3               if(++data_count >= 6)
 673   3                  {
 674   4                  data_count = 0;
 675   4                  IDkey_flash_EN = 1;
 676   4                  }
 677   3               }
 678   2            }
 679   1         }
 680          
 681          
 682          /*---------------------------------------------------
 683             end of file
 684          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1470    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     53    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     28    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
