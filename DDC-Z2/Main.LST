C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c COMPACT BROWSE INCDIR(..\Library) DEBUG OBJECTEX
                    -TEND TABS(3)

line level    source

   1          /*---------------------------------------------------
   2             main.c (v1.00)
   3             
   4             DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21          #include "ISP_DataFlash.h"
  22          #include "schedular.h"
  23          #include "ElecMotor.h"
  24          
  25                                                  
  26          /*------- Public variable declarations --------------------------*/
  27          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  28          extern bit enable_sensor_delayEN;
  29          
  30          // ------ Private variable definitions -----------------------------
  31          bit stolen_alarm_flag = 0;             // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  32          bit position_sensor_EN=0;        //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  33          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  34          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  35          tByte host_stolen_alarm1_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  36          tByte host_stolen_alarm2_count = 0;    //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  37          bit fell_flag=0;                 //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  38          bit raised_flag=0;               //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  39          tByte sensor_2ndstage_count = 0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  40          tWord sensor_3rdstage_time = 0;        //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  41          tByte sensor_3rdstage_effcount = 0;    //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  42          tByte sensor_3rdstage_count = 0;       //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  43          tWord sensor_3rdstage_interval = 0;    //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  44          bit raised_fell_flag = 0;              //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  45          tByte sensor_trigger_count=0;    //´«¸ĞÆ÷´¥·¢¼ÆÊı
  46          tWord sensor_2ndstage_time=0;    //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  47          tByte sensor_1ststage_count=0;   //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  48          tByte nearby_away_interval = 0;     //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  49          
  50          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  51          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  52          tWord timer0_count=0;      // counter for timer0, increment every ticket         
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 2   

  53          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};     //½ÓÊÕÊı¾İ»º´æ
  54          bit receive_data_finished_flag = 0;    //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  55          tByte data_count = 0;            //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  56          tByte one_receive_byte = 0;      //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  57          tByte one_receive_byte_count = 0;         //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  58          bit receive_wire_flag = 1;    //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  59          tByte receive_HV_count = 0;      //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  60          tByte receive_LV_count = 0;      //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  61          tByte fell_wire_time=0;         //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  62          tByte raise_wire_time=0;         //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  63          tWord raised_fell_number = 0;          //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  64          bit raised_fell_once_flag = 0;         //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  65          tByte key_rotated_on_flag = 0;         //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  66          tWord ADC_check_result = 0;      //×÷ÎªAD¼ì²âÖµ
  67          tByte wire_broken_count = 0;     // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  68          bit battery_stolen_EN = 0;       // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  69          tByte battery_stolen_count = 0;  // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  70          bit horizontal_vibration = 0;    // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  71          tWord horizontal_vibration_count = 0;  //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  72          bit vibration_flag = 0;
  73          tWord vibration_count = 0;
  74          bit wire_broken_flag = 0;        // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  75          bit IDkey_flag = 0;        // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  76          tByte IDkey_count = 0;     // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  77          bit sensor_EN = 0;
  78          tByte enable_sensor_delay_count = 0;      // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  79          bit sensor_3rdalarm_flag = 0;
  80          bit wheeled_flag = 0;
  81          tWord wheeled_count = 0;
  82          bit IDkey_speech_flash = 0;
  83          
  84          code tByte IDkey6 _at_ 0x003000;
  85          code tByte IDkey7 _at_ 0x003001;
  86          code tByte IDkey8 _at_ 0x003002;
  87          code tByte IDkey9 _at_ 0x003003;
  88          code tByte IDkey10 _at_ 0x003004;
  89          code tByte IDkey11 _at_ 0x003005;
  90          
  91          tWord IDkey_selflearn_HVcount = 0;
  92          tWord IDkey_selflearn_LVcount = 0;
  93          bit IDkey_selflearn_flag1 = 0;
  94          bit IDkey_selflearn_flag2 = 0;
  95          bit IDkey_selflearn_flag3 = 0;
  96          bit IDkey_selflearn_flag4 = 0;
  97          bit IDkey_selflearn_flag5 = 0;
  98          bit IDkey_selflearn_flag6 = 0;
  99          tByte IDkey_selflearn_flag4count = 0;
 100          bit IDkey_flash_EN = 0;
 101          
 102          tByte IDkey_certificated_times = 0;
 103          bit Silence_Flag = 0;
 104          bit flashing_flag = 0;
 105          bit novoice_flag_Poweron = 1;
 106          
 107          
 108          /*------- Private variable declarations --------------------------*/
 109          
 110          void main()
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 3   

 111             {  
 112   1      
 113   1         noVoice();
 114   1         
 115   1         InitUART();
 116   1         InitT0(1);
 117   1         TI = 0;
 118   1         RI = 0;
 119   1         ES = 1;
 120   1         ET0 = 1;
 121   1         PS = 1;
 122   1         EA = 1;
 123   1      
 124   1         sensor_EN = 0;
 125   1         position_sensor_EN = 0;
 126   1         enable_sensor_delayEN = 1;
 127   1         
 128   1         raised_sensor_detect = 1;
 129   1         fell_sensor_detect = 1;
 130   1      
 131   1         P10=1;
 132   1         
 133   1      // horizontal_sensor = 1;
 134   1         
 135   1         // turn off transmitter, turn on receiver
 136   1         transmiter_EN = 1;
 137   1         receiver_EN = 0;
 138   1      
 139   1      
 140   1         nearby_away_interval = 6;        //³õÊ¼»¯Ê¹¸½»úºÍÖ÷»ú¿ª¹Ø»úµÄ¼ÆÊıÎª¿ÉÒÔÖ´ĞĞµÄ×´Ì¬
 141   1         
 142   1         // initialize the magnet, 
 143   1         MagentControl_1 = 1;
 144   1         MagentControl_2 = 1;
 145   1         
 146   1         transmiter_power = 1; 
 147   1         voice_EN=0;    //½«¹¦·Å¹Ø±Õ
 148   1         
 149   1         // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 150   1         motor_lock = 1;
 151   1         TR0 = 1;
 152   1         
 153   1         while(1)
 154   1            {
 155   2            SCH_Dispatch_Tasks();
 156   2            
 157   2            // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 158   2            if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 159   2               {
 160   3               stolen_alarm_flag = 1;
 161   3               if(key_rotate == 0)
 162   3                  {
 163   4      //          SCH_Add_Task(stolen_alarm_speech1, 0, 0);
 164   4                  stolen_alarm_speech1();
 165   4                  }
 166   3               if(++host_stolen_alarm1_count >= 4)
 167   3                  {
 168   4                  host_stolen_alarm1_count = 0;
 169   4                  host_stolen_alarm1_EN = 0;
 170   4                  stolen_alarm_flag = 0;
 171   4                  sensor_3rdalarm_flag = 0;
 172   4                  }
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 4   

 173   3               }
 174   2            if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 175   2               {
 176   3               stolen_alarm_flag = 1;
 177   3               if(key_rotate == 0)
 178   3                  {
 179   4      //          SCH_Add_Task(stolen_alarm_speech2, 0, 0);
 180   4                  stolen_alarm_speech2();
 181   4                  }
 182   3               if(++host_stolen_alarm2_count >= 4)
 183   3                  {
 184   4                  host_stolen_alarm2_count = 0;
 185   4                  host_stolen_alarm2_EN = 0;
 186   4                  stolen_alarm_flag = 0;
 187   4                  sensor_3rdalarm_flag = 0;
 188   4                  }
 189   3               }
 190   2            }
 191   1         }
 192          
 193          /*------------------------------------------------------------------
 194             timerT0()
 195             operation every ticket.
 196          --------------------------------------------------------------------*/
 197          
 198          void timer0() interrupt interrupt_timer_0_overflow
 199             {
 200   1         // manually reload timer0 configuration
 201   1         TH0 = timer0_8H;
 202   1         TL0 = timer0_8L;
 203   1         
 204   1         // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 205   1         if(++timer0_count >= 2000)
 206   1            {
 207   2            // reset timer0 ticket counter every 2s
 208   2            timer0_count=0;
 209   2            
 210   2            // Check Battery's voltage
 211   2      //       SCH_Add_Task(CheckADC, 0, 0);
 212   2            CheckADC();
 213   2            
 214   2            if(IDkey_flag == 1)
 215   2               {
 216   3               if(++IDkey_count >= 5)
 217   3                  {
 218   4                  IDkey_count = 0;
 219   4                  IDkey_flag = 0;
 220   4                  IDkey_certificated_times = 0;
 221   4                  if(key_rotated_on_flag == 0)
 222   4                     {
 223   5                     enable_sensor();              
 224   5                     }
 225   4                  }        
 226   3               }
 227   2                     
 228   2            if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 229   2               {
 230   3               if(++enable_sensor_delay_count >= 3)
 231   3                  {
 232   4                  enable_sensor_delay_count = 0;
 233   4                  enable_sensor_delayEN = 0;
 234   4                  enable_sensor();
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 5   

 235   4                  }
 236   3               }
 237   2      
 238   2            if(IDkey_selflearn_flag4 == 1)
 239   2               {
 240   3               if(++IDkey_selflearn_flag4count > 5)
 241   3                  {
 242   4                  IDkey_selflearn_HVcount = 0;
 243   4                  IDkey_selflearn_LVcount = 0;
 244   4                  IDkey_selflearn_flag1 = 0;
 245   4                  IDkey_selflearn_flag2 = 0;
 246   4                  IDkey_selflearn_flag3 = 0;
 247   4                  IDkey_selflearn_flag4 = 0;
 248   4                  IDkey_selflearn_flag4count = 0;           
 249   4                  }        
 250   3               }
 251   2            }  
 252   1      
 253   1         if(IDkey_speech_flash == 1)
 254   1            {
 255   2            IDkey_speech_flash = 0;
 256   2      //    SCH_Add_Task(ID_speech, 0, 0);
 257   2            ID_speech();
 258   2            SCH_Delete_Program(stolen_alarm_speech1);
 259   2            SCH_Delete_Program(stolen_alarm_speech2);
 260   2            }
 261   1      
 262   1         if(key_rotate == 1)
 263   1            {
 264   2            IDkey_selflearn_LVcount = 0;
 265   2                     
 266   2            if(++IDkey_selflearn_HVcount > 4000)
 267   2               {
 268   3               IDkey_selflearn_HVcount = 4002;
 269   3               IDkey_selflearn_flag1 = 0;
 270   3               IDkey_selflearn_flag2 = 0;
 271   3               IDkey_selflearn_flag3 = 0;
 272   3               IDkey_selflearn_flag4 = 0;
 273   3               IDkey_selflearn_flag5 = 0;
 274   3               }
 275   2            else
 276   2               {
 277   3               IDkey_selflearn_flag1 = 1;
 278   3               if(IDkey_selflearn_flag2 == 1)
 279   3                  IDkey_selflearn_flag3 = 1;
 280   3               if(IDkey_selflearn_flag4 == 1)
 281   3                  IDkey_selflearn_flag5 = 1;
 282   3               }
 283   2            }
 284   1         else
 285   1            {
 286   2            IDkey_selflearn_HVcount = 0;
 287   2            
 288   2            if(IDkey_selflearn_flag1 == 1)
 289   2               IDkey_selflearn_flag2 = 1;
 290   2               
 291   2            if(IDkey_selflearn_flag3 == 1)
 292   2               IDkey_selflearn_flag4 = 1;
 293   2            
 294   2            if(IDkey_selflearn_flag5 == 1)
 295   2               IDkey_selflearn_flag6 = 1;
 296   2            
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 6   

 297   2            if(++IDkey_selflearn_LVcount > 4000)
 298   2               {
 299   3               IDkey_selflearn_LVcount = 4002;
 300   3               IDkey_selflearn_flag1 = 0;
 301   3               IDkey_selflearn_flag2 = 0;
 302   3               IDkey_selflearn_flag3 = 0;
 303   3               IDkey_selflearn_flag4 = 0;
 304   3               IDkey_selflearn_flag5 = 0;
 305   3               }
 306   2            }
 307   1      
 308   1      
 309   1      
 310   1         if(IDkey_flash_EN == 1)
 311   1            {
 312   2            IDkey_flash_EN = 0;
 313   2            flashing_flag = 1;
 314   2            IDkey_selflearn_flag1 = 0;
 315   2            IDkey_selflearn_flag2 = 0;
 316   2            IDkey_selflearn_flag3 = 0;
 317   2            IDkey_selflearn_flag4 = 0;
 318   2            IDkey_selflearn_flag5 = 0;
 319   2            IDkey_selflearn_flag6 = 0;
 320   2            SCH_Add_Task(Self_learn_programming, 0, 0);
 321   2      //    SCH_Add_Task(Self_learn_speech, 0, 0);
 322   2            Self_learn_speech();
 323   2            }
 324   1         
 325   1         // detect whether key is rotated on,  
 326   1         if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1))    
 327   1            {
 328   2            Delay_1ms();
 329   2            // anti-trigger, Delay(5) confirm the key rotation.
 330   2            if(key_rotate == 1)
 331   2               {
 332   3               disable_sensor();
 333   3      
 334   3               IDkey_count = 0;
 335   3               IDkey_flag = 0;
 336   3               IDkey_certificated_times = 0;
 337   3      
 338   3      //       SCH_Add_Task(ElecMotor_CW, 0, 0);
 339   3               ElecMotor_CW();
 340   3               slave_nearby_operation();
 341   3      //       SCH_Add_Task(slave_nearby_operation, 0, 0);
 342   3               }
 343   2            }     
 344   1                  
 345   1         // detect whether key is rotated off
 346   1         if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 347   1            {
 348   2            if((vibration_flag == 0)&&(wheeled_flag == 0))
 349   2               {
 350   3               Delay_1ms();
 351   3               if(key_rotate == 0)
 352   3                  {
 353   4                  // reset key rotation flag
 354   4                  key_rotated_on_flag=0;
 355   4      //          SCH_Add_Task(slave_away_operation, 0, 0);
 356   4                  slave_away_operation();             
 357   4                  }           
 358   3               }
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 7   

 359   2            }
 360   1            
 361   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 362   1            {
 363   2            vibration_flag = 1;
 364   2            vibration_count = 0;
 365   2            }
 366   1          if(vibration_flag == 1)
 367   1            {
 368   2            if(++vibration_count >= 2000)
 369   2               {
 370   3               vibration_flag = 0;
 371   3               vibration_count = 0;
 372   3               }
 373   2            }
 374   1      
 375   1      
 376   1         if(wheeled_rotate == 1)
 377   1            {
 378   2            wheeled_flag = 1;
 379   2            wheeled_count = 0;
 380   2            }
 381   1         if(wheeled_flag == 1)
 382   1            {
 383   2            if(++wheeled_count >= 2000)
 384   2               {
 385   3               wheeled_flag = 0;
 386   3               wheeled_count = 0;
 387   3               }
 388   2            }
 389   1         
 390   1               
 391   1         if((sensor_detect == 0)||(horizontal_sensor == 0))
 392   1            {
 393   2            vibration_flag = 1;
 394   2            vibration_count = 0;       
 395   2            }     
 396   1            
 397   1         
 398   1         // judge whether battery has been stolen, 0.4V/4V
 399   1         if((ADC_check_result < 0x096) && (key_rotate == 0))
 400   1            {
 401   2            battery_stolen_EN = 1;
 402   2            }        
 403   1         else if(ADC_check_result > 0x100)
 404   1            {
 405   2            battery_stolen_EN = 0;
 406   2            battery_stolen_count = 0;
 407   2            }        
 408   1      
 409   1         // judge host is fell or raised every 1ms?
 410   1         if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 411   1            {
 412   2            // judge vibration sensor is enable?
 413   2            if(sensor_EN == 1)   
 414   2               {        
 415   3               // sensor trigger status, 0, 1 or 2?
 416   3               switch(sensor_trigger_count)
 417   3                  {
 418   4                  // case 0, it means host is in waiting status. waiting for first touch.
 419   4                  case 0:
 420   4                     {
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 8   

 421   5                     
 422   5                     // judge host been touched and also not in vibration alarm
 423   5      //             if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))      
 424   5                     if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0)&&(flashing_flag == 0))  
             -   
 425   5                        {
 426   6                        // judge LV is more than 2ms, if yes, it means a effective touch
 427   6                        if(++sensor_1ststage_count >= 1)       
 428   6                           {
 429   7                           sensor_1ststage_count=0;
 430   7                           
 431   7                           // sensor trigge status progress to case 1.
 432   7                           sensor_trigger_count = 1;
 433   7                           // alarm speech for first touch
 434   7      //                   SCH_Add_Task(host_touch_speech, 0, 0);
 435   7                           host_touch_speech();
 436   7                           }
 437   6                        }
 438   5                     else
 439   5                        {
 440   6                        // if no LV, reset the count.
 441   6                        sensor_1ststage_count = 0;
 442   6                        }
 443   5                     }
 444   4                  break;
 445   4                  
 446   4                  // waiting for next touch, 
 447   4                  case 1:
 448   4                     {
 449   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 450   5                        {
 451   6                        // LV for 2s, means a effective touch
 452   6                        if(++sensor_2ndstage_count >= 1)
 453   6                           {
 454   7                           sensor_2ndstage_count = 0;
 455   7                           sensor_trigger_count = 2;
 456   7                           // alarm speech for 2nd touch
 457   7      //                   SCH_Add_Task(host_2ndtouch_speech, 0, 0);
 458   7                           host_2ndtouch_speech();
 459   7                           }
 460   6                        }
 461   5                     else
 462   5                        {
 463   6                        sensor_2ndstage_count = 0;
 464   6                        }
 465   5                     
 466   5                     // if there is no touch in 4s, reset sensor trigger status, etc.
 467   5                     if(++sensor_2ndstage_time >= 4000)
 468   5                        {
 469   6                        sensor_trigger_count = 0;
 470   6                        sensor_2ndstage_count = 0;
 471   6                        sensor_1ststage_count = 0;
 472   6                        sensor_2ndstage_time = 0;
 473   6                        }
 474   5                     }
 475   4                  break;
 476   4                  
 477   4                  // waiting for 3rd touch
 478   4                  case 2:
 479   4                     {
 480   5                     if((sensor_detect == 0)||(horizontal_sensor == 0))
 481   5                        {
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 9   

 482   6                        // 2s LV is a effective touch
 483   6                        if(++sensor_3rdstage_count >= 1)
 484   6                           {
 485   7                           sensor_3rdstage_count = 0;
 486   7                           // stolen alarm speech enable
 487   7                           host_stolen_alarm1_EN = 1;
 488   7                           host_stolen_alarm2_EN = 1; 
 489   7                           sensor_3rdalarm_flag = 1;                    
 490   7                           }
 491   6                        }
 492   5                     else
 493   5                        {
 494   6                        sensor_3rdstage_count = 0;
 495   6                        }
 496   5                     
 497   5                     // if there is no touch in 4s, reset all.
 498   5                     if(++sensor_3rdstage_time >= 4000)
 499   5                        {
 500   6                        sensor_trigger_count = 0;
 501   6                        sensor_1ststage_count = 0;
 502   6                        sensor_2ndstage_count = 0;
 503   6                        sensor_2ndstage_time = 0;
 504   6                        sensor_3rdstage_time = 0;
 505   6                        sensor_3rdstage_interval = 800;
 506   6                        sensor_3rdstage_count = 0;
 507   6                        sensor_3rdstage_effcount = 0;             
 508   6                        }
 509   5                     }
 510   4                  break;
 511   4                  }
 512   3               
 513   3               // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 514   3               if((wire_broken == 0) && (wire_broken_count < 51))  
 515   3                  {
 516   4                  if(++wire_broken_count > 50)
 517   4                     {
 518   5                     host_stolen_alarm1_EN = 1;
 519   5                     host_stolen_alarm2_EN = 1; 
 520   5                     wire_broken_count = 51;
 521   5                     }  
 522   4                  }
 523   3               else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 524   3                  {
 525   4                  wire_broken_count = 0;
 526   4                  host_stolen_alarm1_EN = 0;
 527   4                  host_stolen_alarm2_EN = 0;
 528   4                  }
 529   3               
 530   3               }
 531   2            }
 532   1         
 533   1         // judge whether position sensor is enable
 534   1         if(position_sensor_EN==1)     
 535   1            {
 536   2            // judge whether there is a LV
 537   2            if(raised_sensor_detect == 0) 
 538   2               {
 539   3               // LV > 0.5s means a effective input
 540   3               if(++raise_wire_time==10)
 541   3                  {
 542   4                  // flag raised, and reset fell
 543   4                  raised_flag=1;
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 10  

 544   4                  fell_flag=0;
 545   4                  // judge whether there once been a raised or fell.
 546   4                  if(raised_fell_once_flag == 0)
 547   4                     {
 548   5                     // if no, flag raised and fell flag
 549   5                     raised_fell_flag = 1;               
 550   5                     }
 551   4                  }     
 552   3               }
 553   2            else
 554   2               {
 555   3               raised_flag=0;
 556   3               raised_alarm_count=0;
 557   3               raise_wire_time=0;
 558   3               raised_fell_flag = 0;
 559   3               }
 560   2            // judge whether there is a LV
 561   2            if(fell_sensor_detect==0)
 562   2               {
 563   3               // LV > 0.5s means a effective input
 564   3               if(++fell_wire_time==10)   
 565   3                  {
 566   4                  // flag fell, and reset raised
 567   4                  fell_flag=1;         
 568   4                  raised_flag=0;
 569   4                  // judge whether there once been a raised or fell
 570   4                  if(raised_fell_once_flag == 0)
 571   4                     {
 572   5                     raised_fell_flag = 1;               
 573   5                     }
 574   4                  }     
 575   3               }
 576   2            else
 577   2               {
 578   3               fell_flag=0;
 579   3               fell_alarm_count=0;
 580   3               fell_wire_time=0;
 581   3               raised_fell_flag = 0;
 582   3               }
 583   2            }
 584   1         
 585   1         // judge whether raised or fell, if yes, reset all after 10s.
 586   1         if(raised_fell_flag == 1)
 587   1            {
 588   2            if(++raised_fell_number >= 4000)
 589   2               {
 590   3               raised_fell_flag = 0;
 591   3               raised_fell_number = 0;
 592   3               raised_fell_once_flag = 1;
 593   3               
 594   3               sensor_trigger_count = 0;
 595   3               sensor_1ststage_count = 0;
 596   3               sensor_2ndstage_count = 0;
 597   3               sensor_2ndstage_time = 0;
 598   3               sensor_3rdstage_time = 0;
 599   3               sensor_3rdstage_interval = 800;
 600   3               sensor_3rdstage_count = 0;
 601   3               sensor_3rdstage_effcount = 0;             
 602   3               }
 603   2            }
 604   1         
 605   1         // detect the horizontal sensor
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 11  

 606   1         if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 607   1            {
 608   2            Delay(3);
 609   2            if((horizontal_sensor == 0)||(sensor_detect == 0))
 610   2               {
 611   3               horizontal_vibration = 1;
 612   3               horizontal_vibration_count = 0;
 613   3               }
 614   2            }
 615   1         if(++horizontal_vibration_count >= 5000)
 616   1            {
 617   2            horizontal_vibration_count = 5001;
 618   2            horizontal_vibration = 0;
 619   2            }
 620   1         }
 621          
 622          /*-----------------------------------------------
 623             UART interrupt
 624          -----------------------------------------------*/
 625          void uart_isr() interrupt 4 
 626             {
 627   1         if(RI)
 628   1            {
 629   2            RI=0;
 630   2            received_data_buffer[data_count] = SBUF;
 631   2      
 632   2            // assign one byte to buffer[i] 
 633   2            
 634   2            if(IDkey_selflearn_flag6 == 0)
 635   2               {
 636   3               // judge whether buffer[0] is CmdHead
 637   3               if((data_count == 0) && (received_data_buffer[0] == IDkey6))
 638   3                  {
 639   4                  data_count = 1;
 640   4                  }
 641   3               else if((data_count == 1) && (received_data_buffer[1] == IDkey7))
 642   3                  {
 643   4                  data_count = 2;
 644   4                  }
 645   3               else if((data_count == 2) && (received_data_buffer[2] == IDkey8))
 646   3                  {
 647   4                  data_count = 3;
 648   4                  }
 649   3               else if((data_count == 3) && (received_data_buffer[3] == IDkey9))
 650   3                  {
 651   4                  data_count = 4;
 652   4                  }
 653   3               else if((data_count == 4) && (received_data_buffer[4] == IDkey10))
 654   3                  {
 655   4                  data_count = 5;
 656   4                  }
 657   3               else if((data_count == 5) && (received_data_buffer[5] == IDkey11))
 658   3                  {
 659   4                  data_count = 0;   
 660   4                  IDkey_flag = 1;
 661   4                  IDkey_count = 0;
 662   4                  disable_sensor();
 663   4                  IDkey_speech_flash = 1;
 664   4                  
 665   4                  if(IDkey_certificated_times++ >= 1)
 666   4                     {
 667   5                     Silence_Flag = 1;
C51 COMPILER V9.51   MAIN                                                                  12/23/2014 11:16:05 PAGE 12  

 668   5                     }
 669   4                  }
 670   3               else 
 671   3                  {
 672   4                  data_count = 0;
 673   4                  }        
 674   3               }
 675   2            else
 676   2               {
 677   3               
 678   3               if(++data_count >= 6)
 679   3                  {
 680   4                  data_count = 0;
 681   4                  IDkey_flash_EN = 1;
 682   4                  }
 683   3               }
 684   2            }
 685   1         }
 686          
 687          
 688          /*---------------------------------------------------
 689             end of file
 690          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1442    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     53    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     29    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
