C51 COMPILER V9.51   COMMUNICATION                                                         11/14/2014 09:37:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE COMMUNICATION
OBJECT MODULE PLACED IN .\communication.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE ..\Library\communication.c BROWSE INCDIR(..\Library) DE
                    -BUG OBJECTEXTEND PRINT(.\communication.lst) OBJECT(.\communication.obj)

line level    source

   1          /*---------------------------------------------------
   2                  communication.c (v1.00)
   3                  
   4                  通信程序
   5          ---------------------------------------------------*/   
   6          
   7          #include "main.h"
   8          #include "port.h"
   9          
  10          #include "communication.h"
  11          #include "Delay.h"
  12          #include "uart.h"
  13          
  14          /*------ private variable --------------------------*/
  15          tByte myTxRxData[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  16          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;
  17          
  18          /*------- Public variable declarations --------------------------*/
  19          extern tByte receive_LV_count;          
  20          extern bit receive_wire_flag;           
  21          extern tByte one_receive_byte;          
  22          extern tByte one_receive_byte_count;                    
  23          extern tByte receive_HV_count;          
  24          extern tByte data_count;                                
  25          extern tByte received_data_buffer[7];           
  26          extern bit receive_data_finished_flag;          
  27          
  28          /*----------------------------------------------------
  29                  initsignal()
  30                  
  31                  初始化信号程序，接收机在接接收信号的时候，需要有
  32                  一段代码来使接收机打开，而这一段程序有可能无法识别
  33                  出来，而是相当于废代码，只占用通信时间。
  34          ----------------------------------------------------*/
  35          void initsignal()
  36                  {
  37   1              tByte k,k1;
  38   1              tByte mystartbuffer = 0xaa;
  39   1              for(k1 = 0; k1 < 3; k1++)
  40   1                      {
  41   2                      for(k=0;k<8;k++)
  42   2                              {
  43   3                              if((mystartbuffer&0x80) == 0x80)//为1
  44   3                                      {
  45   4                                      P10=0;
  46   4                                      Custom_Delay(23, 21);
  47   4                                      }
  48   3                              else
  49   3                                      {
  50   4                                      P10=0;
  51   4                                      Custom_Delay(23, 21);
  52   4                                      }
  53   3                              P10=1;
  54   3                              mystartbuffer<<=1;
C51 COMPILER V9.51   COMMUNICATION                                                         11/14/2014 09:37:45 PAGE 2   

  55   3                              Custom_Delay(43, 21);
  56   3                              }
  57   2                      mystartbuffer=0xaa;
  58   2                      Custom_Delay(23, 21);
  59   2                      }
  60   1              P10=1;
  61   1              }
  62          
  63          /*--------------------------------------------------
  64                  Send_Data()
  65                  将数据发送出去
  66          --------------------------------------------------*/
  67          void Send_Data(tByte x)
  68                  {
  69   1              tByte i,n;
  70   1              for(i=0;i<3;i++)
  71   1                      {
  72   2                      for(n=0;n<8;n++)
  73   2                              {
  74   3                              if((myTxRxData[i]&0x80)==0x80)
  75   3                                      {
  76   4                                      P10=0;
  77   4                                      Custom_Delay(36, x);
  78   4                                      }
  79   3                              else
  80   3                                      {
  81   4                                      P10=0;
  82   4                                      Custom_Delay(23, x);
  83   4                                      }
  84   3                              P10=1;
  85   3                              myTxRxData[i]<<=1;
  86   3                              Custom_Delay(15, x);
  87   3                              }
  88   2                      }       
  89   1              }
  90          
  91          /*--------------------------------------------------
  92                  ComMode_Data()
  93                  
  94                  主机接收到编码1信号后，会反馈一个编码1信号给附机
  95                  以表示主机在附机附近。
  96          ---------------------------------------------------*/
  97          void ComMode_Data(tByte ComMode, x)     
  98                  {
  99   1              receiver_EN = 1;
 100   1              Delay(20);
 101   1              transmiter_EN = 0;
 102   1              myTxRxData[0] = CmdHead;
 103   1              myTxRxData[1] = MyAddress;
 104   1              myTxRxData[2] = ComMode;
 105   1      
 106   1              initsignal();
 107   1          Send_Data(x);
 108   1              
 109   1              transmiter_EN = 1;
 110   1              receiver_EN = 0;
 111   1              }
 112          
 113          /*------------------------------------------------------------------
 114                  UART发送数据
 115          ------------------------------------------------------------------*/
 116          void UART_Send_Data(void)
C51 COMPILER V9.51   COMMUNICATION                                                         11/14/2014 09:37:45 PAGE 3   

 117                  {
 118   1              receiver_EN = 1;
 119   1              Delay(20);
 120   1              transmiter_EN = 0;
 121   1              myTxRxData[0] = IDkey0;
 122   1              myTxRxData[1] = IDkey1;
 123   1              myTxRxData[2] = IDkey2;
 124   1              myTxRxData[3] = IDkey3;
 125   1              myTxRxData[4] = IDkey4;
 126   1              myTxRxData[5] = IDkey5;
 127   1              initsignal();
 128   1              SendNByte(myTxRxData, 6);
 129   1              
 130   1              transmiter_EN = 1;
 131   1              receiver_EN = 0;
 132   1              
 133   1              }
 134          
 135          /*-----------------------------------------------------------------------------
 136                  receive_byte()
 137                  receive a byte program
 138          -----------------------------------------------------------------------------*/
 139          void receive_byte(void)
 140                  {
 141   1              // P11 constantly HV, if detected a LV, judge it.
 142   1              if(P11 == 0)
 143   1                      {
 144   2                      // count the LV time, if more than 12ms, reset it.
 145   2                      if(++receive_LV_count == 120)
 146   2                              {
 147   3                              receive_LV_count = 0;
 148   3                              }
 149   2                      receive_wire_flag = 0;
 150   2                      }
 151   1              // if P11 return to HV
 152   1              else
 153   1                      {
 154   2                      // and already have LV before, so we think it maybe a bit signal
 155   2                      if(receive_wire_flag == 0)
 156   2                              {
 157   3                              // set the flag, to judge a bit only one time
 158   3                              receive_wire_flag = 1;
 159   3      
 160   3                              // judge the LV time, if 3.5ms < time < 8ms, we think it is a "0". time<3.5ms means a noise.
 161   3                              if((receive_LV_count > 35)&&(receive_LV_count <= 80))   
 162   3                                      {
 163   4                                      // save "0" to one byte
 164   4                                      one_receive_byte <<= 1;
 165   4                                      one_receive_byte &= 0xfe;
 166   4                                      one_receive_byte_count++;
 167   4                                      receive_HV_count = 0;
 168   4                                      }
 169   3                              // time > 8ms, means a "1"
 170   3                              else if((receive_LV_count > 80))
 171   3                                      {
 172   4                                      // save "1" to one byte
 173   4                                      one_receive_byte <<= 1;
 174   4                                      one_receive_byte |= 0x01;
 175   4                                      one_receive_byte_count++;
 176   4                                      receive_HV_count = 0;
 177   4                                      }
 178   3                              
C51 COMPILER V9.51   COMMUNICATION                                                         11/14/2014 09:37:45 PAGE 4   

 179   3                              else
 180   3                                      {
 181   4                                      // increase the count for HV
 182   4                                      receive_HV_count++;     
 183   4                                      }
 184   3               // reset LV count
 185   3                              receive_LV_count = 0;
 186   3                              }
 187   2                      else
 188   2                              {
 189   3                              // judge whether HV count > 6ms, if yes, means a restart
 190   3                              if(++receive_HV_count >= 60)
 191   3                                      {
 192   4                                      one_receive_byte_count = 0;
 193   4                                      receive_wire_flag = 1;
 194   4                                      data_count = 0;
 195   4                                      }               
 196   3                              }
 197   2                      }
 198   1              }
 199          
 200          /*-----------------------------------------------------------------------------
 201                  receive_word()
 202                  receive a word program
 203          -----------------------------------------------------------------------------*/
 204          void receive_word(void)
 205                  {
 206   1              // one byte have 8 bit, once receive a bit, the count increase, once it is 8, it means a byte received.
 207   1              if(one_receive_byte_count == 8)
 208   1                      {
 209   2                      one_receive_byte_count = 0;
 210   2                      // assign one byte to buffer[i] 
 211   2                      received_data_buffer[data_count] = one_receive_byte;
 212   2                      
 213   2                      // judge whether buffer[0] is CmdHead
 214   2                      if((data_count == 0) && (received_data_buffer[0] == CmdHead))
 215   2                              {
 216   3                              data_count = 1;
 217   3                              }
 218   2                      // judge whether buffer[1] is MyAddress
 219   2                      else if((data_count == 1) && (received_data_buffer[1] == MyAddress))
 220   2                              {
 221   3                              data_count = 2;
 222   3                              }
 223   2                      else if(data_count == 2)
 224   2                              {
 225   3                              receive_data_finished_flag = 1;
 226   3                              data_count = 0;
 227   3                              }
 228   2                      else 
 229   2                              {
 230   3                              data_count = 0;
 231   3                              }
 232   2                      }
 233   1              }
 234          
 235          /*--------------------------------------------------
 236                  send_code_to_lock()
 237                  
 238                  将密码发送给锁体。
 239          ---------------------------------------------------*/
 240          void send_code_to_lock(tByte x, y)      
C51 COMPILER V9.51   COMMUNICATION                                                         11/14/2014 09:37:45 PAGE 5   

 241          {
 242   1              unsigned char i,n;
 243   1              myTxRxData[0]=CmdHead;
 244   1              myTxRxData[1]=MyAddress;
 245   1              myTxRxData[2]=x;
 246   1      /*      myTxRxData[3]=0x00;
 247   1              myTxRxData[4]=0x00;
 248   1              myTxRxData[5]=0x00;
 249   1              myTxRxData[6]=0x00;
 250   1      */
 251   1              for(i=0;i<3;i++)
 252   1              {
 253   2                      for(n=0;n<8;n++)
 254   2                      {
 255   3                              if((myTxRxData[i]&0x80) == 0x80)//为1
 256   3                              {
 257   4                                      MagentControl_1 = 0;
 258   4                                      Custom_Delay(36, y);
 259   4                              }
 260   3                              else//为0的情况
 261   3                              {
 262   4                                      MagentControl_1 = 0;
 263   4                                      Custom_Delay(23, y);
 264   4                              }
 265   3                              MagentControl_1 = 1;            //常态为高电平
 266   3                              myTxRxData[i] <<= 1;
 267   3                              Custom_Delay(15, y);
 268   3                      }
 269   2              }
 270   1      }
 271                  
 272          /*---------------------------------------------------
 273                  end of file
 274          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    475    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
