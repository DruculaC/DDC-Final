C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar, with ID card.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21                                                  
  22          /*------- Public variable declarations --------------------------*/
  23          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  24          extern bit enable_sensor_delayEN;
  25          
  26          // ------ Private variable definitions -----------------------------
  27          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                                                //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;                                      //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;                //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;                 //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;             //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;                        //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;             //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;           //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;           //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;  //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          tByte nearby_away_interval = 0;         //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  48          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊı¾İ»º´æ
  50          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;                           //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  52          tByte one_receive_byte = 0;             //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  53          tByte one_receive_byte_count = 0;                       //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 2   

             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;                        //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  60          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag=1;                    //µç¶¯³µ¿ªÆô±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tByte key_rotated_off_flag=0;                   //µç¶¯³µ¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  63          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  64          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  65          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  66          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  67          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  68          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  69          bit vibration_flag = 0;
  70          tWord vibration_count = 0;
  71          bit wire_broken_flag = 0;                       // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  72          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;              // ÓÉÇ°5Î»ÃÜÂë×é³ÉµÄÒì»ò
  73          bit IDkey_flag = 0;                     // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  74          tByte IDkey_count = 0;          // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  75          bit sensor_EN = 0;
  76          tByte enable_sensor_delay_count = 0;            // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  77          bit sensor_3rdalarm_flag = 0;
  78          bit wheeled_flag = 0;
  79          tWord wheeled_count = 0;
  80          
  81          
  82          void main()
  83                  {
  84   1              InitUART();
  85   1              InitT0(1);
  86   1              
  87   1              TI = 0;
  88   1              RI = 0;
  89   1              ES = 1;
  90   1              ET0 = 1;
  91   1              PS = 1;
  92   1              EA = 1;
  93   1              
  94   1              sensor_EN = 0;
  95   1              position_sensor_EN = 0;
  96   1      
  97   1              noVoice();
  98   1      
  99   1              voice_EN=0;             //½«¹¦·Å¹Ø±Õ
 100   1      
 101   1              raised_sensor_detect=1;
 102   1              fell_sensor_detect=1;
 103   1      
 104   1              P10=1;
 105   1              
 106   1          horizontal_sensor = 1;
 107   1              // open communication
 108   1              
 109   1              // turn off transmitter, turn on receiver
 110   1              transmiter_EN = 1;
 111   1              receiver_EN = 0;
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 3   

 112   1      
 113   1              nearby_away_interval = 6;                        //³õÊ¼»¯Ê¹¸½»úºÍÖ÷»ú¿ª¹Ø»úµÄ¼ÆÊıÎª¿ÉÒÔÖ´ĞĞµÄ×´Ì¬
 114   1              
 115   1              // initialize the magnet, 
 116   1              MagentControl_1 = 1;
 117   1              MagentControl_2 = 1;
 118   1      
 119   1              transmiter_power = 1; 
 120   1         
 121   1              wire_broken = 1;
 122   1              
 123   1              // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 124   1              motor_lock = 1;
 125   1              
 126   1              while(1)
 127   1                      {        
 128   2                      
 129   2                      // ÅĞ¶Ï´«¸ĞÆ÷ÊÇ·ñÔÚÕñ¶¯
 130   2                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 131   2                              {
 132   3                              vibration_flag = 1;
 133   3                              vibration_count = 0;                    
 134   3                              }               
 135   2                      }
 136   1              }
 137          
 138          /*------------------------------------------------------------------
 139                  timerT0()
 140                  operation every ticket.
 141          --------------------------------------------------------------------*/
 142          
 143          void timer0() interrupt interrupt_timer_0_overflow
 144                  {
 145   1              // manually reload timer0 configuration
 146   1              TH0 = timer0_8H;
 147   1              TL0 = timer0_8L;
 148   1              
 149   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 150   1              if(++timer0_count >= 2000)
 151   1                      {
 152   2                      // reset timer0 ticket counter every 2s
 153   2                      timer0_count=0;
 154   2                      
 155   2                      // detect the battery voltage
 156   2                      ADC_check_result = GetADCResult(6);     
 157   2                      
 158   2                      // if fell and raised flag is 1, send alarm signal every 2s.
 159   2                      if((fell_flag==1)&&(fell_alarm_count<5))
 160   2                              {
 161   3                              ComMode_5_Data();
 162   3                              fell_alarm_count++;
 163   3                              }
 164   2                      if((raised_flag==1)&&(raised_alarm_count<5))            
 165   2                              {
 166   3                              ComMode_4_Data();
 167   3                              raised_alarm_count++;
 168   3                              }
 169   2                              
 170   2                      if((battery_stolen_EN == 1)&&(battery_stolen_count < 4))
 171   2                              {
 172   3                              if(key_rotate == 0)
 173   3                                      {
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 4   

 174   4                                      ComMode_2_Data();
 175   4                                      battery_stolen_speech();
 176   4                                      battery_stolen_count++;
 177   4                                      }
 178   3                              }
 179   2                      
 180   2                      if(IDkey_flag == 1)
 181   2                              {
 182   3                              if(++IDkey_count >= 15)
 183   3                                      {
 184   4                                      IDkey_count = 0;
 185   4                                      IDkey_flag = 0;
 186   4                                      if(key_rotated_off_flag == 1)
 187   4                                              {
 188   5                                              enable_sensor();                                        
 189   5                                              }
 190   4                                      }                       
 191   3                              }
 192   2                                                                              
 193   2                      if((enable_sensor_delayEN == 1)&&(key_rotate == 0)&&(vibration_flag == 0))
 194   2                              {
 195   3                              if(++enable_sensor_delay_count >= 5)
 196   3                                      {
 197   4                                      enable_sensor_delay_count = 0;
 198   4                                      enable_sensor_delayEN = 0;
 199   4                                      enable_sensor();
 200   4                                      }
 201   3                              }
 202   2                                              
 203   2                      // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 204   2                      if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 205   2                              {
 206   3                              stolen_alarm_flag = 1;
 207   3                              if(key_rotate == 0)
 208   3                                      {
 209   4                                      if(wire_broken_flag == 0)
 210   4                                              {
 211   5                                              ComMode_3_Data();                                                                  
 212   5                                              }
 213   4                                      else
 214   4                                              {                                                                     
 215   5                                              ComMode_6_Data();
 216   5                                              }
 217   4                                              
 218   4                                      stolen_alarm_speech1();
 219   4                                      }
 220   3                              if(++host_stolen_alarm1_count >= 4)
 221   3                                      {                                                                                       
 222   4                                      host_stolen_alarm1_count = 0;
 223   4                                      host_stolen_alarm1_EN = 0;
 224   4                                      stolen_alarm_flag = 0;
 225   4                                      sensor_3rdalarm_flag = 0;
 226   4                                      }
 227   3                              }
 228   2                      if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 229   2                              {
 230   3                              stolen_alarm_flag = 1;
 231   3                              if(key_rotate == 0)
 232   3                                      {
 233   4                                      if(wire_broken_flag == 0)
 234   4                                              {
 235   5                                              ComMode_3_Data();
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 5   

 236   5                                              }
 237   4                                      else
 238   4                                              {
 239   5                                              ComMode_6_Data();
 240   5                                              }
 241   4      
 242   4                                      stolen_alarm_speech2();
 243   4                                      }
 244   3                              if(++host_stolen_alarm2_count >= 4)
 245   3                                      {
 246   4                                      host_stolen_alarm2_count = 0;
 247   4                                      host_stolen_alarm2_EN = 0;
 248   4                                      stolen_alarm_flag = 0;
 249   4                                      sensor_3rdalarm_flag = 0;
 250   4                                      }
 251   3                              }                       
 252   2                      }
 253   1              
 254   1              // detect whether key is rotated on,  
 255   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1))            
 256   1                      {                                                                        
 257   2                      Delay(5);
 258   2                      // anti-trigger, Delay(5) confirm the key rotation.
 259   2                      if(key_rotate == 1)
 260   2                              {
 261   3                              slave_nearby_operation();                     
 262   3                              // flag key rotation status
 263   3                              key_rotated_on_flag = 1;
 264   3                              key_rotated_off_flag = 0;
 265   3                              IDkey_count = 0;
 266   3                              IDkey_flag = 0;                         
 267   3                              }
 268   2                      }
 269   1                      
 270   1              // detect whether key is rotated off
 271   1              if((key_rotate == 0)&&(key_rotated_off_flag == 0))
 272   1                      {
 273   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 274   2                              {
 275   3                              Delay(5);
 276   3                              if(key_rotate == 0)
 277   3                                      {
 278   4                                      // handle with battery status
 279   4                                      verifybattery(ADC_check_result);
 280   4                                      // reset key rotation flag
 281   4                                      key_rotated_on_flag = 0;
 282   4                                      key_rotated_off_flag = 1;
 283   4                                      slave_away_operation();
 284   4                                      }                               
 285   3                              }
 286   2                      }
 287   1              
 288   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 289   1                      {
 290   2                      vibration_flag = 1;
 291   2                      vibration_count = 0;
 292   2                      }       
 293   1              
 294   1              if(vibration_flag == 1)
 295   1                      {
 296   2                      if(++vibration_count > 2000)
 297   2                              {
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 6   

 298   3                              vibration_flag = 0;
 299   3                              vibration_count = 0;
 300   3                              }
 301   2                      }               
 302   1              
 303   1      
 304   1              if(wheeled_rotate == 1)
 305   1                      {
 306   2                      wheeled_flag = 1;
 307   2                      wheeled_count = 0;
 308   2                      }
 309   1              if(wheeled_flag == 1)
 310   1                      {
 311   2                      if(++wheeled_count >= 2000)
 312   2                              {
 313   3                              wheeled_flag = 0;
 314   3                              wheeled_count = 0;
 315   3                  }
 316   2                      }
 317   1      
 318   1              // judge host is fell or raised every 1ms?
 319   1              if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 320   1                      {
 321   2                      // judge vibration sensor is enable?
 322   2                      if(sensor_EN == 1)      
 323   2                              {                       
 324   3                              // sensor trigger status, 0, 1 or 2?
 325   3                              switch(sensor_trigger_count)
 326   3                                      {
 327   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 328   4                                      case 0:
 329   4                                              {
 330   5                                              
 331   5                                              // judge host been touched and also not in vibration alarm
 332   5      //                                      if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 333   5                                              if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 334   5                                                      {
 335   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 336   6                                                      if(++sensor_1ststage_count >= 2)                        
 337   6                                                              {
 338   7                                                              sensor_1ststage_count=0;
 339   7                                                              
 340   7                                                              // sensor trigge status progress to case 1.
 341   7                                                              sensor_trigger_count = 1;
 342   7                                                              // alarm speech for first touoch
 343   7                                                              host_touch_speech();
 344   7                                                              }
 345   6                                                      }
 346   5                                              else
 347   5                                                      {
 348   6                                                      // if no LV, reset the count.
 349   6                                                      sensor_1ststage_count = 0;
 350   6                                                      }
 351   5                                              }
 352   4                                      break;
 353   4                                      
 354   4                                      // waiting for next touch, 
 355   4                                      case 1:
 356   4                                              {
 357   5      //                                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 358   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 359   5                                                      {
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 7   

 360   6                                                      // LV for 2s, means a effective touch             8
 361   6                                                      if(++sensor_2ndstage_count >= 2)
 362   6                                                              {
 363   7                                                              sensor_2ndstage_count = 0;
 364   7                                                              sensor_trigger_count = 2;
 365   7                                                              // alarm speech for 2nd touch
 366   7                                                              host_2ndtouch_speech();
 367   7                                                              }
 368   6                                                      }
 369   5                                              else
 370   5                                                      {
 371   6                                                      sensor_2ndstage_count = 0;
 372   6                                                      }
 373   5                                              
 374   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 375   5                                              if(++sensor_2ndstage_time >= 4000)
 376   5                                                      {
 377   6                                                      sensor_trigger_count = 0;
 378   6                                                      sensor_2ndstage_count = 0;
 379   6                                                      sensor_1ststage_count = 0;
 380   6                                                      sensor_2ndstage_time = 0;
 381   6                                                      }
 382   5                                              }
 383   4                                      break;
 384   4                                      
 385   4                                      // waiting for 3rd touch
 386   4                                      case 2:
 387   4                                              {
 388   5      //                                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 389   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 390   5                                                      {
 391   6                                                      // 2s LV is a effective touch
 392   6                                                      if(++sensor_3rdstage_count >= 1)
 393   6                                                              {
 394   7                                                              sensor_3rdstage_count = 0;
 395   7                                                              // stolen alarm speech enable
 396   7                                                              host_stolen_alarm1_EN = 1;
 397   7                                                              host_stolen_alarm2_EN = 1;                                              
 398   7                                                              sensor_3rdalarm_flag = 1;                                                       
 399   7                                                              }
 400   6                                                      }
 401   5                                              else
 402   5                                                      {
 403   6                                                      sensor_3rdstage_count = 0;
 404   6                                                      }
 405   5                                              
 406   5                                              // if there is no touch in 4s, reset all.
 407   5                                              if(++sensor_3rdstage_time >= 4000)
 408   5                                                      {
 409   6                                                      sensor_trigger_count = 0;
 410   6                                                      sensor_1ststage_count = 0;
 411   6                                                      sensor_2ndstage_count = 0;
 412   6                                                      sensor_2ndstage_time = 0;
 413   6                                                      sensor_3rdstage_time = 0;
 414   6                                                      sensor_3rdstage_interval = 800;
 415   6                                                      sensor_3rdstage_count = 0;
 416   6                                                      sensor_3rdstage_effcount = 0;                                   
 417   6                                                      }
 418   5                                              }
 419   4                                      break;
 420   4                                      }
 421   3                              
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 8   

 422   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 423   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 424   3                                      {
 425   4                                      if(++wire_broken_count > 50)
 426   4                                              {
 427   5                                              host_stolen_alarm1_EN = 1;
 428   5                                              host_stolen_alarm2_EN = 1;      
 429   5                                              wire_broken_count = 51;
 430   5                                              wire_broken_flag = 1;
 431   5                                              }
 432   4                                      }
 433   3                              else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 434   3                                      {
 435   4                                      wire_broken_count = 0;
 436   4                                      host_stolen_alarm1_EN = 0;
 437   4                                      host_stolen_alarm2_EN = 0;
 438   4                                      }
 439   3                              
 440   3                              // judge whether battery has been stolen, 0.4V/4V
 441   3                              if(ADC_check_result < 0x100)
 442   3                                      {
 443   4                                      battery_stolen_EN = 1;
 444   4                                      }
 445   3                              else if(ADC_check_result > 0x200)
 446   3                                      {
 447   4                                      battery_stolen_EN = 0;
 448   4                                      battery_stolen_count = 0;
 449   4                                      }                       
 450   3                              }
 451   2                      }
 452   1              
 453   1              // judge whether position sensor is enable
 454   1              if(position_sensor_EN==1)               
 455   1                      {
 456   2                      // judge whether there is a LV
 457   2                      if(raised_sensor_detect == 0)   
 458   2                              {
 459   3                              // LV > 0.5s means a effective input
 460   3                              if(++raise_wire_time >= 3)
 461   3                                      {
 462   4                                      // flag raised, and reset fell
 463   4                                      raised_flag=1;
 464   4                                      fell_flag=0;
 465   4                                      raise_wire_time = 11;
 466   4                                      // judge whether there once been a raised or fell.
 467   4                                      if(raised_fell_once_flag == 0)
 468   4                                              {
 469   5                                              // if no, flag raised and fell flag
 470   5                                              raised_fell_flag = 1;                                   
 471   5                                              }
 472   4                                      }               
 473   3                              }
 474   2                      else
 475   2                              {
 476   3                              raised_flag=0;
 477   3                              raised_alarm_count=0;
 478   3                              raise_wire_time=0;
 479   3                              raised_fell_flag = 0;
 480   3                              }
 481   2            // judge whether there is a LV
 482   2                      if(fell_sensor_detect==0)
 483   2                              {
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 9   

 484   3                              // LV > 0.5s means a effective input
 485   3                              if(++fell_wire_time >= 3)       
 486   3                                      {
 487   4                                      // flag fell, and reset raised
 488   4                                      fell_flag=1;                    
 489   4                                      raised_flag=0;
 490   4                                      fell_wire_time = 11;
 491   4                                      // judge whether there once been a raised or fell
 492   4                                      if(raised_fell_once_flag == 0)
 493   4                                              {
 494   5                                              raised_fell_flag = 1;                                   
 495   5                                              }
 496   4                                      }               
 497   3                              }
 498   2                      else
 499   2                              {
 500   3                              fell_flag=0;
 501   3                              fell_alarm_count=0;
 502   3                              fell_wire_time=0;
 503   3                              raised_fell_flag = 0;
 504   3                              }
 505   2                      }
 506   1              
 507   1              // judge whether raised or fell, if yes, reset all after 10s.
 508   1              if(raised_fell_flag == 1)
 509   1                      {
 510   2                      if(++raised_fell_number >= 4000)
 511   2                              {
 512   3                              raised_fell_flag = 0;
 513   3                              raised_fell_number = 0;
 514   3                              raised_fell_once_flag = 1;
 515   3                              
 516   3                              sensor_trigger_count = 0;
 517   3                              sensor_1ststage_count = 0;
 518   3                              sensor_2ndstage_count = 0;
 519   3                              sensor_2ndstage_time = 0;
 520   3                              sensor_3rdstage_time = 0;
 521   3                              sensor_3rdstage_interval = 800;
 522   3                              sensor_3rdstage_count = 0;
 523   3                              sensor_3rdstage_effcount = 0;                                   
 524   3                              }
 525   2                      }
 526   1                      
 527   1              // detect the horizontal sensor
 528   1              if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 529   1                      {
 530   2                      Delay(3);
 531   2                      if((horizontal_sensor == 0)||(sensor_detect == 0))
 532   2                              {
 533   3                              horizontal_vibration = 1;
 534   3                              horizontal_vibration_count = 0;
 535   3                              }
 536   2                      }
 537   1              if(++horizontal_vibration_count >= 5000)
 538   1                      {
 539   2                      horizontal_vibration_count = 5001;
 540   2                      horizontal_vibration = 0;
 541   2                      }
 542   1              }
 543          
 544          /*-----------------------------------------------
 545                  ÓÃUART¶Ë¿Ú½ÓÊÕÊı¾İ£¬9600²¨ÌØÂÊ£¬ÊÕµ½ºó±íÊ¾
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 10  

 546                  ÈÏÖ¤ÒÑÍ¨¹ı¡£
 547          -----------------------------------------------*/
 548          void uart_isr() interrupt 4 //ÖĞ¶Ï½ÓÊÕÊı¾İ
 549                  {
 550   1              if(RI)
 551   1                      {
 552   2                      RI=0;
 553   2      
 554   2                      // assign one byte to buffer[i] 
 555   2                      received_data_buffer[data_count] = SBUF;
 556   2                      
 557   2                      // judge whether buffer[0] is CmdHead
 558   2                      if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 559   2                              {
 560   3                              data_count = 1;
 561   3                              }
 562   2                      else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 563   2                              {
 564   3                              data_count = 2;
 565   3                              }
 566   2                      else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 567   2                              {
 568   3                              data_count = 3;
 569   3                              }
 570   2                      else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 571   2                              {
 572   3                              data_count = 4;
 573   3                              }
 574   2                      else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 575   2                              {
 576   3                              data_count = 5;
 577   3                              }
 578   2                      else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 579   2                              {
 580   3                              data_count = 0; 
 581   3                              IDkey_flag = 1;
 582   3                              IDkey_count = 0;
 583   3                              disable_sensor();
 584   3                              }
 585   2                      else 
 586   2                              {
 587   3                              data_count = 0;
 588   3                              }
 589   2                      }
 590   1              }
 591          
 592          /*--------------------------------------------------------------------
 593                  timerT1()
 594                  ¶¨Ê±Æ÷1Ã¿´ÎÒç³öºóÖ´ĞĞµÄ²Ù×÷£¬µÍËÙÂÊÄ£Ê½½ÓÊÕ
 595                  Êı¾İ¡£
 596          
 597          void timerT1() interrupt interrupt_timer_1_overflow
 598                  {
 599             // reload timer1
 600                  TH1 = timer1_8H;                                
 601                  TL1 = timer1_8L;
 602                  
 603                  // receive a tyte
 604                  receive_byte();
 605                  
 606                  // receive a word after every byte
 607                  receive_word();
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 11  

 608                  
 609                  // judge whether a byte has received successfully
 610                  if(receive_data_finished_flag == 1)
 611                          {
 612                          receive_data_finished_flag = 0;
 613                          // judge which mode is received.
 614                          switch(received_data_buffer[2])                 
 615                                  {
 616                                  case ComMode_1:  
 617                                          {
 618                                          if((nearby_away_interval > 6)||(key_rotate == 0))
 619                                                  {
 620                                                  // if receive a ComMode_1 successfully, operation for slave nearby
 621                                                  nearby_away_interval = 0;                                       
 622                                                  }
 623                                          
 624                                          // turn off vibration and position sensor
 625                                          sensor_EN = 0;                                                  
 626                                          position_sensor_EN=0;                   
 627                                          // reset all the flag in sensor
 628                                          fell_flag=0;  
 629                                          raised_flag=0;
 630                                          sensor_trigger_count = 0;
 631                                          sensor_1ststage_count = 0;
 632                                          sensor_2ndstage_count = 0;
 633                                          sensor_2ndstage_time = 0;
 634                                          sensor_3rdstage_time = 0;
 635                                          sensor_3rdstage_interval = 0;
 636                                          sensor_3rdstage_count = 0;
 637                                          sensor_3rdstage_effcount = 0;
 638                                          stolen_alarm_flag = 0;
 639                                          host_stolen_alarm1_EN = 0;
 640                                          host_stolen_alarm1_count = 0;
 641                                          host_stolen_alarm2_EN = 0;
 642                                          host_stolen_alarm2_count = 0;
 643                                          
 644                                          raised_fell_flag = 0;
 645                                          
 646                                          // reset the wire broken count
 647                                          wire_broken_count = 0;
 648                                          
 649                                          // reset the battery stolen flag
 650                                          battery_stolen_EN = 0;
 651                                          battery_stolen_count = 0;
 652                                          }
 653                                  break;
 654                                  }
 655                          }
 656                  }
 657          --------------------------------------------------------------------*/
 658          
 659          
 660          /*---------------------------------------------------
 661                  end of file
 662          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1163    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.51   MAIN                                                                  08/16/2014 14:14:27 PAGE 12  

   DATA SIZE        =     49    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     18    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
