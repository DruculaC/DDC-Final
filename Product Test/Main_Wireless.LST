C51 COMPILER V9.51   MAIN_WIRELESS                                                         07/22/2014 14:58:05 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN_WIRELESS
OBJECT MODULE PLACED IN Main_Wireless.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main_Wireless.c BROWSE INCDIR(..\Library) DEBUG OBJECTE
                    -XTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar, with ID card.
   5          ----------------------------------------------------*/
   6          
   7          //µÁ∂Ø≥µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21                                                  
  22          /*------- Public variable declarations --------------------------*/
  23          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  24          extern bit enable_sensor_delayEN;
  25          
  26          // ------ Private variable definitions -----------------------------
  27          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;               //Œª÷√¥´∏–∆˜£¨º¥µπµÿÃß∆¥´∏–∆˜◊‹ø™πÿ£¨1µƒ ±∫Ú£¨ºÏ≤‚’‚¡Ω∏ˆ¥´∏–∆˜
  29          bit host_stolen_alarm1_EN = 0;      //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄“ª∂Œ”Ô“Ù πƒ‹
  30          bit host_stolen_alarm2_EN = 0;      //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄∂˛∂Œ”Ô“Ù πƒ‹
  31          tByte host_stolen_alarm1_count = 0;             //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄“ª∂Œ”Ô“Ù¥Œ ˝
  32          tByte host_stolen_alarm2_count = 0;             //≈–∂œŒ™±ªµ¡±®æØ∫Ûµƒµ⁄∂˛∂Œ”Ô“Ù¥Œ ˝
  33          bit fell_flag=0;                                                //≈–∂œ÷˜ª˙µπœ¬∫Û£¨÷√1
  34          bit raised_flag=0;                                      //≈–∂œ÷˜ª˙±ªÃß∆∫Û£¨÷√1
  35          tByte sensor_2ndstage_count = 0;                //¥´∏–∆˜Ω¯»Îµ⁄∂˛Ω◊∂ŒºÏ≤‚ ±£¨º∆À„µÕµÁ∆Ωµƒ ±º‰
  36          tWord sensor_3rdstage_time = 0;                 //¥´∏–∆˜Ω¯»Îµ⁄»˝Ω◊∂Œµƒ ±º‰£¨
  37          tByte sensor_3rdstage_effcount = 0;             //¥´∏–∆˜Ω¯»Îµ⁄»˝Ω◊∂Œ∫Û£¨”––ß¥•≈ˆ¥Œ ˝µƒº∆ ˝
  38          tByte sensor_3rdstage_count = 0;                        //¥´∏–∆˜Ω¯»Îµ⁄»˝Ω◊∂Œ∫Û£¨µÕµÁ∆Ωµƒº∆ ˝
  39          tWord sensor_3rdstage_interval = 0;             //¥´∏–∆˜‘⁄µ⁄»˝Ω◊∂Œ÷–£¨√ø¥Œ”––ßµÕµÁ∆Ωº∆ ˝÷Æº‰µƒ ±º‰º‰∏Ù°£‘⁄’‚∆⁄º‰µƒµÕµ
             -Á∆Ω≤ª»œŒ™”––ß°£
  40          bit raised_fell_flag = 0;                                       //µπµÿªÚ’ﬂÃß∆¥•∑¢∫Û£¨¥À±Í÷æŒª÷√1
  41          tByte sensor_trigger_count=0;           //¥´∏–∆˜¥•∑¢º∆ ˝
  42          tWord sensor_2ndstage_time=0;           //¥´∏–∆˜Ω¯»Îµ⁄∂˛Ω◊∂Œ∫Û¡˜ ≈ ±º‰µƒº∆ ˝
  43          tByte sensor_1ststage_count=0;  //¥´∏–∆˜µ⁄“ªΩ◊∂Œ≈–∂œµÕµÁ∆Ωµƒº∆ ˝
  44          tByte nearby_away_interval = 0;         //∏Ωª˙¿Îø™∫ÕøøΩ¸ ±£¨”Ô“ÙÃ· æ∫Õø™πÿÀ¯µƒ ±º‰º‰∏Ù
  45          
  46          tByte raised_alarm_count = 0;    //÷˜ª˙±ªÃß∆∫Û£¨œÚ∏Ωª˙∑¢≥ˆ±®æØ–≈∫≈µƒ¥Œ ˝
  47          tByte fell_alarm_count=0;        //÷˜ª˙µπµÿ∫Û£¨œÚ∏Ωª˙∑¢≥ˆ±®æØ–≈∫≈µƒ¥Œ ˝
  48          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //Ω” ’ ˝æ›ª∫¥Ê
  50          bit receive_data_finished_flag = 0;             //Ω” ’’‚“ª¥Æ ˝æ›ÕÍ≥…∫Û£¨¥À±Í÷æŒª÷√1
  51          tByte data_count = 0;                           //Ω” ’ ˝æ›ª∫¥ÊµƒŒª ˝£¨º¥±Ì√˜µ⁄º∏∏ˆª∫¥Ê ˝æ›
  52          tByte one_receive_byte = 0;             //Ω” ’ ˝æ›µƒ“ª∏ˆ◊÷Ω⁄£¨Ω” ’ÕÍ∫ÛΩ´∆‰∏≥÷µ∏¯received_data_bufferœ‡∂‘”¶µƒ◊÷Ω⁄
C51 COMPILER V9.51   MAIN_WIRELESS                                                         07/22/2014 14:58:05 PAGE 2   

  53          tByte one_receive_byte_count = 0;                       //one_receive_byte”–8Œª£¨¥Àº∆ ˝±Ì√˜Ω” ’µΩµ⁄º∏Œª£¨√ø¥Œº∆ ˝µΩ8µƒ ±∫Ú±Ì√˜
             -“ª∏ˆ◊÷Ω⁄Ω” ’ÕÍ≥…°£
  54          bit receive_wire_flag = 1;              //Ω” ’Õ®–≈œﬂµƒ±Í÷æŒª£¨1±Ì√˜∏ﬂµÁ∆Ω£¨0±Ì√˜µÕµÁ∆Ω£¨√ø¥Œtimer1“Á≥ˆ ±£¨≈–∂œP1.1“ª¥Œ
             -°£“‘¥À¿¥±Ì√˜ «∑ÒŒ™“ª¥Œ’˝»∑µƒœ¬Ωµ—ÿ
  55          tByte receive_HV_count = 0;             //∂® ±∆˜T1‘⁄√ª”––≈∫≈µΩ¿¥µƒ ±∫Ú£¨∂‘∏ﬂµÁ∆Ωº∆ ˝£¨“ªµ©≥¨π˝ƒ≥∏ˆ÷µ£¨‘ÚΩ´one_receive
             -_byte_count«Â0
  56          tByte receive_LV_count = 0;             //√ø¥Œtimer1“Á≥ˆ ±≈–∂œΩ” ’œﬂ»Áπ˚Œ™LV£¨‘Úº∆ ˝º”1£¨“‘¥À¿¥±Ì√˜µÕµÁ∆Ωµƒ ±º‰
  57          tByte fell_wire_time=0;          //µπµÿºÏ≤‚œﬂ£¨ºÏ≤‚µÕµÁ∆Ωµƒ ±º‰
  58          tByte raise_wire_time=0;                        //Ãß∆ºÏ≤‚œﬂ£¨ºÏ≤‚µÕµÁ∆Ωµƒ ±º‰
  59          tWord raised_fell_number = 0;                           //µπµÿªÚ’ﬂÃß∆≥ˆ∑¢∫Û£¨º∆ ˝£¨µΩ¥Ô“ª∂® ˝÷µ∫Û£¨Ω´∆‰”Î±Í÷æŒª“ª∆«Â¡„°£
  60          bit raised_fell_once_flag = 0;                  //raised_fell_flag «∑Ò‘¯æ≠±Í÷æπ˝£¨»Áπ˚±Í÷æπ˝‘Ú÷√1.»ª∫Û÷˜ª˙±ªª÷∏¥µπµÿªÚ’ﬂª
             -÷∏¥Ãß∆ ±£¨¥À±Í÷æŒª∏¥Œª°£
  61          tByte key_rotated_on_flag=0;                    //µÁ∂Ø≥µø™∆Ùπÿ±’±Í÷æŒª£¨1±Ì æµÁ∂Ø≥µø™∆Ù¡À£¨0±Ì æµÁ∂Ø≥µπÿ±’¡À
  62          tWord ADC_check_result = 0;             //◊˜Œ™ADºÏ≤‚÷µ
  63          tByte wire_broken_count = 0;            // ◊˜Œ™∂œœﬂ∫Ûµƒ ±º‰ºÏ≤‚
  64          bit battery_stolen_EN = 0;                      // ◊˜Œ™µÁ≥ÿ±ªµ¡µƒ πƒ‹∂À
  65          tByte battery_stolen_count = 0; // ◊˜Œ™µÁ≥ÿ±ªµ¡µƒ±®æØ¥Œ ˝
  66          bit horizontal_vibration = 0;           // ±Ì æ¥π÷±¥´∏–∆˜‘⁄’Ò∂Ø£¨¥À ±æÕÀ„πÿ‘ø≥◊£¨“≤≤ªƒ‹÷¥––πÿ‘ø≥◊µƒ≤Ÿ◊˜°
  67          tWord horizontal_vibration_count = 0;   //¥π÷±¥´∏–∆˜¥•∑¢∫Û£¨∂‘ ±º‰Ω¯––º∆ ˝°£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;                       // ºÙ∂œÀ¯œﬂµƒ±Í÷æŒª
  71          tByte IDkey5 = IDkey0^IDkey1^IDkey2^IDkey3^IDkey4;              // ”…«∞5Œª√‹¬Î◊È≥…µƒ“ÏªÚ
  72          bit IDkey_flag = 0;                     // µ±IDø®øøΩ¸ ±»œ÷§Õ®π˝∫Û÷√1£¨
  73          tByte IDkey_count = 0;          // IDø®»œ÷§Õ®π˝∫Û£¨º∆ ±1∑÷÷”£¨ π‘ø≥◊ƒ‹◊™∂Ø°£
  74          bit sensor_EN = 0;
  75          tByte enable_sensor_delay_count = 0;            // ¥´∏–∆˜—”≥Ÿµƒ ±º‰
  76          bit sensor_3rdalarm_flag = 0;
  77          bit wheeled_flag = 0;
  78          tWord wheeled_count = 0;
  79          
  80          bit test_flag = 0;              // …Ë÷√≤‚ ‘ø™ ºµƒ±Í÷æŒª
  81          
  82          /*------- Private variable declarations --------------------------*/
  83          
  84          void main()
  85                  {
  86   1      
  87   1      /*      InitUART();
  88   1              InitT0(1);
  89   1              
  90   1              TI = 0;
  91   1              RI = 0;
  92   1              ES = 1;
  93   1              ET0 = 1;
  94   1              PS = 1;
  95   1              EA = 1;
  96   1      */
  97   1              voice_EN = 0;
  98   1              noVoice();      
  99   1              
 100   1              InitTimer(1,100);
 101   1      
 102   1              P10=1;
 103   1                      
 104   1              // initialize the magnet, 
 105   1              MagentControl_1 = 1;
 106   1              MagentControl_2 = 1;
 107   1              wire_broken = 1;
 108   1              
 109   1              // ≥ı ºªØÕÍ±œ∫Û£¨ø™ º≤‚ ‘≥Ã–Ú
 110   1              test_flag = 1;
C51 COMPILER V9.51   MAIN_WIRELESS                                                         07/22/2014 14:58:05 PAGE 3   

 111   1              
 112   1              ADC_check_result = 0x3FF;
 113   1              receiver_EN = 0;
 114   1              
 115   1              while(1)
 116   1                      {        
 117   2                      sEOS_Go_To_Sleep();
 118   2                      }
 119   1              }
 120          
 121          /*------------------------------------------------------------------
 122                  timerT0()
 123                  operation every ticket.
 124          --------------------------------------------------------------------*/
 125          
 126          void timer0() interrupt interrupt_timer_0_overflow
 127                  {
 128   1              // manually reload timer0 configuration
 129   1              TH0 = timer0_8H;
 130   1              TL0 = timer0_8L;
 131   1              
 132   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 133   1              if(++timer0_count >= 10000)
 134   1                      {
 135   2                      // reset timer0 ticket counter every 2s
 136   2                      timer0_count=0;
 137   2                      
 138   2                      if(test_flag == 1)
 139   2                              {
 140   3                              // ø™À¯
 141   3                              magnet_CW();
 142   3      
 143   3                              // ∑¢±®æØ–≈∫≈≥ˆ»•
 144   3                              ComMode_3_Data();
 145   3      
 146   3                              // √ø∏Ù3s≤•∑≈”Ô“Ù£¨≤‚ ‘“Ù∆µ–≈∫≈
 147   3                              Product_Test_Voice();
 148   3      
 149   3                              // ºÏ≤‚ADCµƒµÁ—π÷µ
 150   3                              ADC_check_result = GetADCResult(6);     
 151   3                              
 152   3                              // ∑¢±®æØ–≈∫≈≥ˆ»•
 153   3                              ComMode_3_Data();
 154   3                              
 155   3                              // ≤•±®µÁ¡ø÷µ
 156   3                              verifybattery(ADC_check_result);                                        
 157   3      
 158   3                              // πÿÀ¯
 159   3                              magnet_ACW();
 160   3                              
 161   3                              // ∑¢±®æØ–≈∫≈≥ˆ»•
 162   3                              ComMode_3_Data();
 163   3                              }
 164   2                      }
 165   1      
 166   1              
 167   1              // ºÏ≤‚ID»œ÷§Õ®π˝£¨Õ¨ ±‘ø≥◊¥Úø™∫Ûµƒ≤Ÿ◊˜£¨≤•±®”Ô“Ù°£
 168   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1))            
 169   1                      {                                                                        
 170   2                      Delay(5);
 171   2                      // anti-trigger, Delay(5) confirm the key rotation.
 172   2                      if(key_rotate == 1)
C51 COMPILER V9.51   MAIN_WIRELESS                                                         07/22/2014 14:58:05 PAGE 4   

 173   2                              {
 174   3                  // speech for slave nearby
 175   3                              slave_nearby_speech();
 176   3      
 177   3                              key_rotated_on_flag = 1;
 178   3                              
 179   3                              IDkey_count = 0;
 180   3                              IDkey_flag = 0;                         
 181   3                              }
 182   2                      }
 183   1                      
 184   1              // πÿ‘ø≥◊µƒ≤Ÿ◊˜£¨ºÏ≤‚ «∑Ò”–¬÷◊”‘⁄◊™∂Ø
 185   1              if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 186   1                      {
 187   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 188   2                              {
 189   3                              Delay(5);
 190   3                              if(key_rotate == 0)
 191   3                                      {
 192   4                                      // reset key rotation flag
 193   4                                      key_rotated_on_flag=0;
 194   4                                      
 195   4                                      slave_away_speech();    
 196   4                                      }                               
 197   3                              }
 198   2                      }
 199   1      
 200   1      
 201   1              // ≤‚ ‘¬÷◊”‘⁄◊™∂Øµƒ ±∫Ú£¨≤ªƒ‹πÿÀ¯
 202   1              if(wheeled_rotate == 1)
 203   1                      {
 204   2                      wheeled_flag = 1;
 205   2                      wheeled_count = 0;
 206   2                      }
 207   1              if(wheeled_flag == 1)
 208   1                      {
 209   2                      if(++wheeled_count >= 2000)
 210   2                              {
 211   3                              wheeled_flag = 0;
 212   3                              wheeled_count = 0;
 213   3                  }
 214   2                      }
 215   1      
 216   1              // ≤‚ ‘’Ò∂Ø¥´∏–∆˜
 217   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 218   1                      {
 219   2                      if(++sensor_1ststage_count >= 2)                        
 220   2                              {
 221   3                              sensor_1ststage_count=0;
 222   3                              
 223   3                              host_touch_speech();
 224   3                              }
 225   2                      }
 226   1                                                                      
 227   1              // ƒ√µÙÀ¯£¨ƒ£ƒ‚”–»ÀºÙ∂œÀ¯œﬂ£¨≤•±®”Ô“Ù
 228   1              if(wire_broken == 0) 
 229   1                      {
 230   2                      battery_stolen_speech();
 231   2                      }
 232   1      
 233   1              // ≤‚ ‘ÀÆ“¯ø™πÿ£¨µπµÿªÚ’ﬂÃß∆∫Û£¨≤•±®”Ô“Ù°£
 234   1              if((raised_sensor_detect == 0)||(fell_sensor_detect == 0))
C51 COMPILER V9.51   MAIN_WIRELESS                                                         07/22/2014 14:58:05 PAGE 5   

 235   1                      {
 236   2                      stolen_alarm_speech2();
 237   2                      }
 238   1                              
 239   1              // ≤‚ ‘‘⁄”–µÁ∆Ωµƒ«Èøˆœ¬£¨ƒ√µÙ48VµÁ‘¥£¨ƒ£ƒ‚”–»ÀÕµµÁ∆øµƒ«Èøˆ£¨≤•±®”Ô“Ù
 240   1      //      if(ADC_check_result < 0x100)
 241   1      //              {
 242   1       //       battery_stolen_speech();
 243   1      //              }
 244   1              }
 245          
 246          /*-----------------------------------------------
 247                  ”√UART∂Àø⁄Ω” ’ ˝æ›£¨9600≤®Ãÿ¬ £¨ ’µΩ∫Û±Ì æ
 248                  »œ÷§“—Õ®π˝°£
 249          void uart_isr() interrupt 4 //÷–∂œΩ” ’ ˝æ›
 250                  {
 251                  if(RI)
 252                          {
 253                          RI=0;
 254          
 255                          // assign one byte to buffer[i] 
 256                          received_data_buffer[data_count] = SBUF;
 257                          
 258                          // judge whether buffer[0] is CmdHead
 259                          if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 260                                  {
 261                                  data_count = 1;
 262                                  }
 263                          else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 264                                  {
 265                                  data_count = 2;
 266                                  }
 267                          else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 268                                  {
 269                                  data_count = 3;
 270                                  }
 271                          else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 272                                  {
 273                                  data_count = 4;
 274                                  }
 275                          else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 276                                  {
 277                                  data_count = 5;
 278                                  }
 279                          else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
 280                                  {
 281                                  data_count = 0; 
 282                                  IDkey_flag = 1;
 283                                  IDkey_count = 0;
 284                                  disable_sensor();
 285                                  }
 286                          else 
 287                                  {
 288                                  data_count = 0;
 289                                  }
 290                          }
 291                  }
 292          --------------------------------------------------------------------*/
 293          
 294          /*--------------------------------------------------------------------
 295                  timerT1()
 296                  ∂® ±∆˜1√ø¥Œ“Á≥ˆ∫Û÷¥––µƒ≤Ÿ◊˜£¨µÕÀŸ¬ ƒ£ ΩΩ” ’
C51 COMPILER V9.51   MAIN_WIRELESS                                                         07/22/2014 14:58:05 PAGE 6   

 297                   ˝æ›°£
 298          --------------------------------------------------------------------*/
 299          
 300          void timerT1() interrupt interrupt_timer_1_overflow
 301                  {
 302   1         // reload timer1
 303   1              TH1 = timer1_8H;                                
 304   1              TL1 = timer1_8L;
 305   1              
 306   1              // receive a tyte
 307   1              receive_byte();
 308   1              
 309   1              // receive a word after every byte
 310   1              receive_word();
 311   1              
 312   1              // judge whether a byte has received successfully
 313   1              if(receive_data_finished_flag == 1)
 314   1                      {
 315   2                      receive_data_finished_flag = 0;
 316   2                      // judge which mode is received.
 317   2                      switch(received_data_buffer[2])                 
 318   2                              {
 319   3                              case ComMode_1:  
 320   3                                      {
 321   4                                      IDkey_flag = 1;
 322   4                                      IDkey_count = 0;
 323   4                                      disable_sensor();
 324   4                                      }
 325   3                              break;
 326   3                              }
 327   2                      }
 328   1              }
 329          
 330          /*---------------------------------------------------
 331                  end of file
 332          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    381    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     19    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
