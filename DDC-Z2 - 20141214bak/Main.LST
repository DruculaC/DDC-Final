C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE Main.c BROWSE INCDIR(..\Library) DEBUG OBJECTEXTEND

line level    source

   1          /*---------------------------------------------------
   2                  main.c (v1.00)
   3                  
   4                  DDC-Z program, for electrocar.
   5          ----------------------------------------------------*/
   6          
   7          //µç¶¯³µ
   8          #include "Main.h"
   9          #include "port.h"
  10          
  11          #include "AD.h"
  12          #include "voice.h"
  13          #include "pwm.h"
  14          #include "Timer.h"
  15          #include "Delay.h"
  16          #include "communication.h"
  17          #include "Battery.h"
  18          #include "Other.h"
  19          #include "operation.h"
  20          #include "UART.h"
  21                                                  
  22          /*------- Public variable declarations --------------------------*/
  23          extern tByte timer0_8H, timer0_8L, timer1_8H, timer1_8L;
  24          extern bit enable_sensor_delayEN;
  25          
  26          // ------ Private variable definitions -----------------------------
  27          bit stolen_alarm_flag = 0;                                      // when host been touch 3 times, this flag 1 before alarm voice present, no
             -t to detect sensor for 1st voice alarm.
  28          bit position_sensor_EN=0;               //Î»ÖÃ´«¸ĞÆ÷£¬¼´µ¹µØÌ§Æğ´«¸ĞÆ÷×Ü¿ª¹Ø£¬1µÄÊ±ºò£¬¼ì²âÕâÁ½¸ö´«¸ĞÆ÷
  29          bit host_stolen_alarm1_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒôÊ¹ÄÜ
  30          bit host_stolen_alarm2_EN = 0;      //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒôÊ¹ÄÜ
  31          tByte host_stolen_alarm1_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚÒ»¶ÎÓïÒô´ÎÊı
  32          tByte host_stolen_alarm2_count = 0;             //ÅĞ¶ÏÎª±»µÁ±¨¾¯ºóµÄµÚ¶ş¶ÎÓïÒô´ÎÊı
  33          bit fell_flag=0;                                                //ÅĞ¶ÏÖ÷»úµ¹ÏÂºó£¬ÖÃ1
  34          bit raised_flag=0;                                      //ÅĞ¶ÏÖ÷»ú±»Ì§Æğºó£¬ÖÃ1
  35          tByte sensor_2ndstage_count = 0;                //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶Î¼ì²âÊ±£¬¼ÆËãµÍµçÆ½µÄÊ±¼ä
  36          tWord sensor_3rdstage_time = 0;                 //´«¸ĞÆ÷½øÈëµÚÈı½×¶ÎµÄÊ±¼ä£¬
  37          tByte sensor_3rdstage_effcount = 0;             //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬ÓĞĞ§´¥Åö´ÎÊıµÄ¼ÆÊı
  38          tByte sensor_3rdstage_count = 0;                        //´«¸ĞÆ÷½øÈëµÚÈı½×¶Îºó£¬µÍµçÆ½µÄ¼ÆÊı
  39          tWord sensor_3rdstage_interval = 0;             //´«¸ĞÆ÷ÔÚµÚÈı½×¶ÎÖĞ£¬Ã¿´ÎÓĞĞ§µÍµçÆ½¼ÆÊıÖ®¼äµÄÊ±¼ä¼ä¸ô¡£ÔÚÕâÆÚ¼äµÄµÍµ
             -çÆ½²»ÈÏÎªÓĞĞ§¡£
  40          bit raised_fell_flag = 0;                                       //µ¹µØ»òÕßÌ§Æğ´¥·¢ºó£¬´Ë±êÖ¾Î»ÖÃ1
  41          tByte sensor_trigger_count=0;           //´«¸ĞÆ÷´¥·¢¼ÆÊı
  42          tWord sensor_2ndstage_time=0;           //´«¸ĞÆ÷½øÈëµÚ¶ş½×¶ÎºóÁ÷ÊÅÊ±¼äµÄ¼ÆÊı
  43          tByte sensor_1ststage_count=0;  //´«¸ĞÆ÷µÚÒ»½×¶ÎÅĞ¶ÏµÍµçÆ½µÄ¼ÆÊı
  44          tByte nearby_away_interval = 0;         //¸½»úÀë¿ªºÍ¿¿½üÊ±£¬ÓïÒôÌáÊ¾ºÍ¿ª¹ØËøµÄÊ±¼ä¼ä¸ô
  45          
  46          tByte raised_alarm_count = 0;    //Ö÷»ú±»Ì§Æğºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  47          tByte fell_alarm_count=0;        //Ö÷»úµ¹µØºó£¬Ïò¸½»ú·¢³ö±¨¾¯ĞÅºÅµÄ´ÎÊı
  48          tWord timer0_count=0;           // counter for timer0, increment every ticket                   
  49          tByte received_data_buffer[7]={0x00,0x00,0x00,0x00,0x00,0x00,0x00};             //½ÓÊÕÊı¾İ»º´æ
  50          bit receive_data_finished_flag = 0;             //½ÓÊÕÕâÒ»´®Êı¾İÍê³Éºó£¬´Ë±êÖ¾Î»ÖÃ1
  51          tByte data_count = 0;                           //½ÓÊÕÊı¾İ»º´æµÄÎ»Êı£¬¼´±íÃ÷µÚ¼¸¸ö»º´æÊı¾İ
  52          tByte one_receive_byte = 0;             //½ÓÊÕÊı¾İµÄÒ»¸ö×Ö½Ú£¬½ÓÊÕÍêºó½«Æä¸³Öµ¸øreceived_data_bufferÏà¶ÔÓ¦µÄ×Ö½Ú
  53          tByte one_receive_byte_count = 0;                       //one_receive_byteÓĞ8Î»£¬´Ë¼ÆÊı±íÃ÷½ÓÊÕµ½µÚ¼¸Î»£¬Ã¿´Î¼ÆÊıµ½8µÄÊ±ºò±íÃ÷
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 2   

             -Ò»¸ö×Ö½Ú½ÓÊÕÍê³É¡£
  54          bit receive_wire_flag = 1;              //½ÓÊÕÍ¨ĞÅÏßµÄ±êÖ¾Î»£¬1±íÃ÷¸ßµçÆ½£¬0±íÃ÷µÍµçÆ½£¬Ã¿´Îtimer1Òç³öÊ±£¬ÅĞ¶ÏP1.1Ò»´Î
             -¡£ÒÔ´ËÀ´±íÃ÷ÊÇ·ñÎªÒ»´ÎÕıÈ·µÄÏÂ½µÑØ
  55          tByte receive_HV_count = 0;             //¶¨Ê±Æ÷T1ÔÚÃ»ÓĞĞÅºÅµ½À´µÄÊ±ºò£¬¶Ô¸ßµçÆ½¼ÆÊı£¬Ò»µ©³¬¹ıÄ³¸öÖµ£¬Ôò½«one_receive
             -_byte_countÇå0
  56          tByte receive_LV_count = 0;             //Ã¿´Îtimer1Òç³öÊ±ÅĞ¶Ï½ÓÊÕÏßÈç¹ûÎªLV£¬Ôò¼ÆÊı¼Ó1£¬ÒÔ´ËÀ´±íÃ÷µÍµçÆ½µÄÊ±¼ä
  57          tByte fell_wire_time=0;          //µ¹µØ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  58          tByte raise_wire_time=0;                        //Ì§Æğ¼ì²âÏß£¬¼ì²âµÍµçÆ½µÄÊ±¼ä
  59          tWord raised_fell_number = 0;                           //µ¹µØ»òÕßÌ§Æğ³ö·¢ºó£¬¼ÆÊı£¬µ½´ïÒ»¶¨ÊıÖµºó£¬½«ÆäÓë±êÖ¾Î»Ò»ÆğÇåÁã¡£
  60          bit raised_fell_once_flag = 0;                  //raised_fell_flagÊÇ·ñÔø¾­±êÖ¾¹ı£¬Èç¹û±êÖ¾¹ıÔòÖÃ1.È»ºóÖ÷»ú±»»Ö¸´µ¹µØ»òÕß»
             -Ö¸´Ì§ÆğÊ±£¬´Ë±êÖ¾Î»¸´Î»¡£
  61          tByte key_rotated_on_flag = 1;                  //µç¶¯³µ¿ªÆô¹Ø±Õ±êÖ¾Î»£¬1±íÊ¾µç¶¯³µ¿ªÆôÁË£¬0±íÊ¾µç¶¯³µ¹Ø±ÕÁË
  62          tWord ADC_check_result = 0;             //×÷ÎªAD¼ì²âÖµ
  63          tByte wire_broken_count = 0;            // ×÷Îª¶ÏÏßºóµÄÊ±¼ä¼ì²â
  64          bit battery_stolen_EN = 0;                      // ×÷Îªµç³Ø±»µÁµÄÊ¹ÄÜ¶Ë
  65          tByte battery_stolen_count = 0; // ×÷Îªµç³Ø±»µÁµÄ±¨¾¯´ÎÊı
  66          bit horizontal_vibration = 0;           // ±íÊ¾´¹Ö±´«¸ĞÆ÷ÔÚÕñ¶¯£¬´ËÊ±¾ÍËã¹ØÔ¿³×£¬Ò²²»ÄÜÖ´ĞĞ¹ØÔ¿³×µÄ²Ù×÷¡
  67          tWord horizontal_vibration_count = 0;   //´¹Ö±´«¸ĞÆ÷´¥·¢ºó£¬¶ÔÊ±¼ä½øĞĞ¼ÆÊı¡£
  68          bit vibration_flag = 0;
  69          tWord vibration_count = 0;
  70          bit wire_broken_flag = 0;                       // ¼ô¶ÏËøÏßµÄ±êÖ¾Î»
  71          extern tByte IDkey5;            // ÓÉÇ°5Î»ÃÜÂë×é³ÉµÄÒì»ò
  72          bit IDkey_flag = 0;                     // µ±ID¿¨¿¿½üÊ±ÈÏÖ¤Í¨¹ıºóÖÃ1£¬
  73          tByte IDkey_count = 0;          // ID¿¨ÈÏÖ¤Í¨¹ıºó£¬¼ÆÊ±1·ÖÖÓ£¬Ê¹Ô¿³×ÄÜ×ª¶¯¡£
  74          bit sensor_EN = 0;
  75          tByte enable_sensor_delay_count = 0;            // ´«¸ĞÆ÷ÑÓ³ÙµÄÊ±¼ä
  76          bit sensor_3rdalarm_flag = 0;
  77          bit wheeled_flag = 0;
  78          tWord wheeled_count = 0;
  79          
  80          /*------- Private variable declarations --------------------------*/
  81          
  82          void main()
  83                  {
  84   1              noVoice();
  85   1              
  86   1              InitUART();
  87   1              InitT0(1);
  88   1              TI = 0;
  89   1              RI = 0;
  90   1              ES = 1;
  91   1              ET0 = 1;
  92   1              PS = 1;
  93   1              EA = 1;
  94   1      
  95   1              sensor_EN = 0;
  96   1              position_sensor_EN = 0;
  97   1      
  98   1              raised_sensor_detect=1;
  99   1              fell_sensor_detect=1;
 100   1      
 101   1              P10=1;
 102   1              
 103   1              horizontal_sensor = 1;
 104   1              
 105   1              // turn off transmitter, turn on receiver
 106   1              transmiter_EN = 1;
 107   1              receiver_EN = 0;
 108   1      
 109   1      
 110   1              nearby_away_interval = 6;                       //³õÊ¼»¯Ê¹¸½»úºÍÖ÷»ú¿ª¹Ø»úµÄ¼ÆÊıÎª¿ÉÒÔÖ´ĞĞµÄ×´Ì¬
 111   1              
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 3   

 112   1              // initialize the magnet, 
 113   1              MagentControl_1 = 1;
 114   1              MagentControl_2 = 1;
 115   1              
 116   1              transmiter_power = 1; 
 117   1              voice_EN=0;             //½«¹¦·Å¹Ø±Õ
 118   1         
 119   1              // lock the external motor, ·ÀÖ¹Ëø»¹Ã»ÍêÈ«´ò¿ªµÄÊ±ºò£¬³µÊÖ¼Óµçµ¼ÖÂÂÖ×ÓÓëËøµÄ¸æËßÅö×²¡£ 
 120   1              motor_lock = 1;
 121   1              TR0 = 1;
 122   1              
 123   1              while(1)
 124   1                      {
 125   2      
 126   2                      if((sensor_detect == 0)||(horizontal_sensor == 0))
 127   2                              {
 128   3                              Delay(2);
 129   3                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 130   3                                      {
 131   4                                      vibration_flag = 1;
 132   4                                      vibration_count = 0;                    
 133   4                                      }
 134   3                              }               
 135   2                              
 136   2                      // whether host has been touched 3 times, if yes, then alarm 2 speech alternantively.
 137   2                      if((host_stolen_alarm1_EN == 1)&&(host_stolen_alarm1_count < 4))
 138   2                              {
 139   3                              stolen_alarm_flag = 1;
 140   3                              if(key_rotate == 0)
 141   3                                      {
 142   4                                      stolen_alarm_speech1();
 143   4                                      }
 144   3                              if(++host_stolen_alarm1_count >= 4)
 145   3                                      {
 146   4                                      host_stolen_alarm1_count = 0;
 147   4                                      host_stolen_alarm1_EN = 0;
 148   4                                      stolen_alarm_flag = 0;
 149   4                                      sensor_3rdalarm_flag = 0;
 150   4                                      }
 151   3                              }
 152   2                      if((host_stolen_alarm2_EN == 1)&&(host_stolen_alarm2_count < 4))
 153   2                              {
 154   3                              stolen_alarm_flag = 1;
 155   3                              if(key_rotate == 0)
 156   3                                      {
 157   4                                      stolen_alarm_speech2();
 158   4                                      }
 159   3                              if(++host_stolen_alarm2_count >= 4)
 160   3                                      {
 161   4                                      host_stolen_alarm2_count = 0;
 162   4                                      host_stolen_alarm2_EN = 0;
 163   4                                      stolen_alarm_flag = 0;
 164   4                                      sensor_3rdalarm_flag = 0;
 165   4                                      }
 166   3                              }
 167   2                      
 168   2                      // judge whether battery has been stolen, 0.4V/4V
 169   2                      if((ADC_check_result < 0x096) && (key_rotate == 0))
 170   2                              {
 171   3                              battery_stolen_EN = 1;
 172   3                              }                       
 173   2                      else if(ADC_check_result > 0x100)
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 4   

 174   2                              {
 175   3                              battery_stolen_EN = 0;
 176   3                              battery_stolen_count = 0;
 177   3                              }                       
 178   2      
 179   2                      }
 180   1              }
 181          
 182          /*------------------------------------------------------------------
 183                  timerT0()
 184                  operation every ticket.
 185          --------------------------------------------------------------------*/
 186          
 187          void timer0() interrupt interrupt_timer_0_overflow
 188                  {
 189   1              // manually reload timer0 configuration
 190   1              TH0 = timer0_8H;
 191   1              TL0 = timer0_8L;
 192   1              
 193   1              // timer0 is 1ms ticket, count the time flow of timer0, then operate every 2s.
 194   1              if(++timer0_count >= 2000)
 195   1                      {
 196   2                      // reset timer0 ticket counter every 2s
 197   2                      timer0_count=0;
 198   2                      
 199   2      
 200   2                      // detect the battery voltage
 201   2                      ADC_check_result = GetADCResult(6);
 202   2                      
 203   2                      if(IDkey_flag == 1)
 204   2                              {
 205   3                              if(++IDkey_count >= 15)
 206   3                                      {
 207   4                                      IDkey_count = 0;
 208   4                                      IDkey_flag = 0;
 209   4                                      if(key_rotated_on_flag == 0)
 210   4                                              {
 211   5                                              enable_sensor();                                        
 212   5                                              }
 213   4                                      }                       
 214   3                              }
 215   2                      
 216   2                      if((enable_sensor_delayEN == 1)&&(key_rotate == 0))
 217   2                              {
 218   3                              if(++enable_sensor_delay_count >= 15)
 219   3                                      {
 220   4                                      enable_sensor_delay_count = 0;
 221   4                                      enable_sensor_delayEN = 0;
 222   4                                      enable_sensor();
 223   4                                      }
 224   3                              }
 225   2                      }
 226   1                      
 227   1      
 228   1              // detect whether key is rotated on,  
 229   1              if((key_rotate == 1)&&(key_rotated_on_flag == 0)&&(IDkey_flag == 1))            
 230   1                      {
 231   2                      Delay(5);
 232   2                      // anti-trigger, Delay(5) confirm the key rotation.
 233   2                      if(key_rotate == 1)
 234   2                              {
 235   3                              // turn on the magnet
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 5   

 236   3                              if(battery_stolen_EN == 1)
 237   3                                      magnet_CW(6000, 2100, 42);
 238   3                  else
 239   3                                      magnet_CW(6000, 2100, 42);
 240   3                              slave_nearby_operation();
 241   3                              // flag key rotation status
 242   3                              key_rotated_on_flag = 1;
 243   3                              
 244   3                              IDkey_count = 0;
 245   3                              IDkey_flag = 0;
 246   3                              }
 247   2                      }               
 248   1                                      
 249   1              // detect whether key is rotated off
 250   1              if((key_rotate == 0)&&(key_rotated_on_flag == 1))
 251   1                      {
 252   2                      if((vibration_flag == 0)&&(wheeled_flag == 0))
 253   2                              {
 254   3                              Delay(5);
 255   3                              if(key_rotate == 0)
 256   3                                      {
 257   4                                      // handle with battery status
 258   4                                      verifybattery(ADC_check_result);
 259   4                                      // reset key rotation flag
 260   4                                      key_rotated_on_flag=0;
 261   4                                      // turn off the magnet 
 262   4                                      if(battery_stolen_EN == 1)
 263   4                                              magnet_ACW(2000, 7100);
 264   4                                      else
 265   4                                              magnet_ACW(2000, 7100);
 266   4                                              
 267   4                                      slave_away_operation();
 268   4                                      }                               
 269   3                              }
 270   2                      }
 271   1                      
 272   1              if((sensor_detect == 0)||(horizontal_sensor == 0))
 273   1                      {
 274   2                      vibration_flag = 1;
 275   2                      vibration_count = 0;
 276   2                      }
 277   1          if(vibration_flag == 1)
 278   1                      {
 279   2                      if(++vibration_count >= 2000)
 280   2                              {
 281   3                              vibration_flag = 0;
 282   3                              vibration_count = 0;
 283   3                              }
 284   2                      }
 285   1      
 286   1              if(wheeled_rotate == 1)
 287   1                      {
 288   2                      wheeled_flag = 1;
 289   2                      wheeled_count = 0;
 290   2                      }
 291   1              if(wheeled_flag == 1)
 292   1                      {
 293   2                      if(++wheeled_count >= 2000)
 294   2                              {
 295   3                              wheeled_flag = 0;
 296   3                              wheeled_count = 0;
 297   3                  }
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 6   

 298   2                      }
 299   1                                      
 300   1      
 301   1              // judge host is fell or raised every 1ms?
 302   1              if((raised_sensor_detect == 1)&&(fell_sensor_detect == 1))
 303   1                      {
 304   2                      // judge vibration sensor is enable?
 305   2                      if(sensor_EN == 1)      
 306   2                              {                       
 307   3                              // sensor trigger status, 0, 1 or 2?
 308   3                              switch(sensor_trigger_count)
 309   3                                      {
 310   4                                      // case 0, it means host is in waiting status. waiting for first touch.
 311   4                                      case 0:
 312   4                                              {
 313   5                                              
 314   5                                              // judge host been touched and also not in vibration alarm
 315   5      //                                      if((sensor_detect == 0)&&(stolen_alarm_flag == 0)&&(transmiter_EN == 1))                
 316   5                                              if(((sensor_detect == 0)||(horizontal_sensor == 0))&&(stolen_alarm_flag == 0))          
 317   5                                                      {
 318   6                                                      // judge LV is more than 2ms, if yes, it means a effective touch
 319   6                                                      if(++sensor_1ststage_count >= 2)                        
 320   6                                                              {
 321   7                                                              sensor_1ststage_count=0;
 322   7                                                              
 323   7                                                              // sensor trigge status progress to case 1.
 324   7                                                              sensor_trigger_count = 1;
 325   7                                                              // alarm speech for first touoch
 326   7                                                              host_touch_speech();
 327   7                           }
 328   6                                                      }
 329   5                                              else
 330   5                                                      {
 331   6                                                      // if no LV, reset the count.
 332   6                                                      sensor_1ststage_count = 0;
 333   6                                                      }
 334   5                                              }
 335   4                                      break;
 336   4                                      
 337   4                                      // waiting for next touch, 
 338   4                                      case 1:
 339   4                                              {
 340   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 341   5                                                      {
 342   6                                                      // LV for 2s, means a effective touch
 343   6                                                      if(++sensor_2ndstage_count >= 2)
 344   6                                                              {
 345   7                                                              sensor_2ndstage_count = 0;
 346   7                                                              sensor_trigger_count = 2;
 347   7                                                              // alarm speech for 2nd touch
 348   7                                                              host_2ndtouch_speech();
 349   7                                                              }
 350   6                                                      }
 351   5                                              else
 352   5                                                      {
 353   6                                                      sensor_2ndstage_count = 0;
 354   6                                                      }
 355   5                                              
 356   5                                              // if there is no touch in 4s, reset sensor trigger status, etc.
 357   5                                              if(++sensor_2ndstage_time >= 4000)
 358   5                                                      {
 359   6                                                      sensor_trigger_count = 0;
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 7   

 360   6                                                      sensor_2ndstage_count = 0;
 361   6                                                      sensor_1ststage_count = 0;
 362   6                                                      sensor_2ndstage_time = 0;
 363   6                                                      }
 364   5                                              }
 365   4                                      break;
 366   4                                      
 367   4                                      // waiting for 3rd touch
 368   4                                      case 2:
 369   4                                              {
 370   5                                              if((sensor_detect == 0)||(horizontal_sensor == 0))
 371   5                                                      {
 372   6                                                      // 2s LV is a effective touch
 373   6                                                      if(++sensor_3rdstage_count >= 1)
 374   6                                                              {
 375   7                                                              sensor_3rdstage_count = 0;
 376   7                                                              // stolen alarm speech enable
 377   7                                                              host_stolen_alarm1_EN = 1;
 378   7                                                              host_stolen_alarm2_EN = 1;      
 379   7                                                              sensor_3rdalarm_flag = 1;                                                       
 380   7                                                              }
 381   6                                                      }
 382   5                                              else
 383   5                                                      {
 384   6                                                      sensor_3rdstage_count = 0;
 385   6                                                      }
 386   5                                              
 387   5                                              // if there is no touch in 4s, reset all.
 388   5                                              if(++sensor_3rdstage_time >= 4000)
 389   5                                                      {
 390   6                                                      sensor_trigger_count = 0;
 391   6                                                      sensor_1ststage_count = 0;
 392   6                                                      sensor_2ndstage_count = 0;
 393   6                                                      sensor_2ndstage_time = 0;
 394   6                                                      sensor_3rdstage_time = 0;
 395   6                                                      sensor_3rdstage_interval = 800;
 396   6                                                      sensor_3rdstage_count = 0;
 397   6                                                      sensor_3rdstage_effcount = 0;                                   
 398   6                                                      }
 399   5                                              }
 400   4                                      break;
 401   4                                      }
 402   3                              
 403   3                              // judge the wire broken, if yes, it means someone has cut the wire of magnet lock
 404   3                              if((wire_broken == 0) && (wire_broken_count < 51))  
 405   3                                      {
 406   4                                      if(++wire_broken_count > 50)
 407   4                                              {
 408   5                                              host_stolen_alarm1_EN = 1;
 409   5                                              host_stolen_alarm2_EN = 1;      
 410   5                                              wire_broken_count = 51;
 411   5                                              }       
 412   4                                      }
 413   3                              else if((wire_broken == 1)&&(sensor_3rdalarm_flag == 0))
 414   3                                      {
 415   4                                      wire_broken_count = 0;
 416   4                                      host_stolen_alarm1_EN = 0;
 417   4                                      host_stolen_alarm2_EN = 0;
 418   4                                      }
 419   3                              
 420   3                              }
 421   2                      }
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 8   

 422   1              
 423   1              // judge whether position sensor is enable
 424   1              if(position_sensor_EN==1)               
 425   1                      {
 426   2                      // judge whether there is a LV
 427   2                      if(raised_sensor_detect == 0)   
 428   2                              {
 429   3                              // LV > 0.5s means a effective input
 430   3                              if(++raise_wire_time==10)
 431   3                                      {
 432   4                                      // flag raised, and reset fell
 433   4                                      raised_flag=1;
 434   4                                      fell_flag=0;
 435   4                                      // judge whether there once been a raised or fell.
 436   4                                      if(raised_fell_once_flag == 0)
 437   4                                              {
 438   5                                              // if no, flag raised and fell flag
 439   5                                              raised_fell_flag = 1;                                   
 440   5                                              }
 441   4                                      }               
 442   3                              }
 443   2                      else
 444   2                              {
 445   3                              raised_flag=0;
 446   3                              raised_alarm_count=0;
 447   3                              raise_wire_time=0;
 448   3                              raised_fell_flag = 0;
 449   3                              }
 450   2            // judge whether there is a LV
 451   2                      if(fell_sensor_detect==0)
 452   2                              {
 453   3                              // LV > 0.5s means a effective input
 454   3                              if(++fell_wire_time==10)        
 455   3                                      {
 456   4                                      // flag fell, and reset raised
 457   4                                      fell_flag=1;                    
 458   4                                      raised_flag=0;
 459   4                                      // judge whether there once been a raised or fell
 460   4                                      if(raised_fell_once_flag == 0)
 461   4                                              {
 462   5                                              raised_fell_flag = 1;                                   
 463   5                                              }
 464   4                                      }               
 465   3                              }
 466   2                      else
 467   2                              {
 468   3                              fell_flag=0;
 469   3                              fell_alarm_count=0;
 470   3                              fell_wire_time=0;
 471   3                              raised_fell_flag = 0;
 472   3                              }
 473   2                      }
 474   1              
 475   1              // judge whether raised or fell, if yes, reset all after 10s.
 476   1              if(raised_fell_flag == 1)
 477   1                      {
 478   2                      if(++raised_fell_number >= 4000)
 479   2                              {
 480   3                              raised_fell_flag = 0;
 481   3                              raised_fell_number = 0;
 482   3                              raised_fell_once_flag = 1;
 483   3                              
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 9   

 484   3                              sensor_trigger_count = 0;
 485   3                              sensor_1ststage_count = 0;
 486   3                              sensor_2ndstage_count = 0;
 487   3                              sensor_2ndstage_time = 0;
 488   3                              sensor_3rdstage_time = 0;
 489   3                              sensor_3rdstage_interval = 800;
 490   3                              sensor_3rdstage_count = 0;
 491   3                              sensor_3rdstage_effcount = 0;                                   
 492   3                              }
 493   2                      }
 494   1              
 495   1              // detect the horizontal sensor
 496   1              if(((horizontal_sensor == 0)||(sensor_detect == 0))&&(horizontal_vibration_count > 5000))
 497   1                      {
 498   2                      Delay(3);
 499   2                      if((horizontal_sensor == 0)||(sensor_detect == 0))
 500   2                              {
 501   3                              horizontal_vibration = 1;
 502   3                              horizontal_vibration_count = 0;
 503   3                              }
 504   2                      }
 505   1              if(++horizontal_vibration_count >= 5000)
 506   1                      {
 507   2                      horizontal_vibration_count = 5001;
 508   2                      horizontal_vibration = 0;
 509   2                      }
 510   1              }
 511          
 512          /*-----------------------------------------------
 513                  UART interrupt
 514          -----------------------------------------------*/
 515          void uart_isr() interrupt 4 //??????
 516                  {
 517   1              if(RI)
 518   1                      {
 519   2                      RI=0;
 520   2      
 521   2                      // assign one byte to buffer[i] 
 522   2                      received_data_buffer[data_count] = SBUF;
 523   2                      
 524   2                      // judge whether buffer[0] is CmdHead
 525   2                      if((data_count == 0) && (received_data_buffer[0] == IDkey0))
 526   2                              {
 527   3                              data_count = 1;
 528   3                              }
 529   2                      else if((data_count == 1) && (received_data_buffer[1] == IDkey1))
 530   2                              {
 531   3                              data_count = 2;
 532   3                              }
 533   2                      else if((data_count == 2) && (received_data_buffer[2] == IDkey2))
 534   2                              {
 535   3                              data_count = 3;
 536   3                              }
 537   2                      else if((data_count == 3) && (received_data_buffer[3] == IDkey3))
 538   2                              {
 539   3                              data_count = 4;
 540   3                              }
 541   2                      else if((data_count == 4) && (received_data_buffer[4] == IDkey4))
 542   2                              {
 543   3                              data_count = 5;
 544   3                              }
 545   2                      else if((data_count == 5) && (received_data_buffer[5] == IDkey5))
C51 COMPILER V9.51   MAIN                                                                  12/14/2014 08:44:17 PAGE 10  

 546   2                              {
 547   3                              data_count = 0; 
 548   3                              IDkey_flag = 1;
 549   3                              IDkey_count = 0;
 550   3                              disable_sensor();
 551   3                              }
 552   2                      else 
 553   2                              {
 554   3                              data_count = 0;
 555   3                              }
 556   2                      }
 557   1              }
 558          
 559          
 560          /*---------------------------------------------------
 561                  end of file
 562          ----------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1106    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     18    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
